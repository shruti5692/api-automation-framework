package org.framework.utils;

import okhttp3.*;

public class JwtFetcher {

    private static final OkHttpClient client = new OkHttpClient();

    public static void main(String[] args) {
        try {
            String jwt = getJwtToken();
            System.out.println("‚úÖ JWT Token: " + jwt);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String getJwtToken() throws Exception {
        // Read values from VM options
        String ssoUrl = System.getProperty("sso.token.url");
        String username = System.getProperty("open.am.username");
        String password = System.getProperty("open.am.password");
        String translateUrl = System.getProperty("token.translate.url");

        if (ssoUrl == null || username == null || password == null || translateUrl == null) {
            throw new IllegalArgumentException("‚ùå Missing required system properties! " +
                    "Please pass -Dsso.token.url, -Dopen.am.username, -Dopen.am.password, -Dtoken.translate.url");
        }

        // Step 1: Call SSO login (POST with username/password)
        String loginPayload = "{ \"username\": \"" + username + "\", \"password\": \"" + password + "\" }";

        RequestBody loginBody = RequestBody.create(
                loginPayload, MediaType.parse("application/json"));

        Request ssoRequest = new Request.Builder()
                .url(ssoUrl)
                .post(loginBody)
                .build();

        Response ssoResponse = client.newCall(ssoRequest).execute();
        if (!ssoResponse.isSuccessful()) {
            throw new RuntimeException("‚ùå SSO login failed: " + ssoResponse.code());
        }

        String ssoResponseBody = ssoResponse.body().string();
        System.out.println("üîπ SSO Response: " + ssoResponseBody);

        // ‚ö†Ô∏è Here you may need to parse JSON to extract "tokenId" or similar from response.
        // For now, assuming full response IS the token (adjust if needed).
        String ssoToken = ssoResponseBody;

        // Step 2: Call translate URL with SSO token
        String translatePayload = "{ \"input_token\": \"" + ssoToken + "\" }";

        RequestBody translateBody = RequestBody.create(
                translatePayload, MediaType.parse("application/json"));

        Request translateRequest = new Request.Builder()
                .url(translateUrl)
                .post(translateBody)
                .build();

        Response translateResponse = client.newCall(translateRequest).execute();
        if (!translateResponse.isSuccessful()) {
            throw new RuntimeException("‚ùå Translate token failed: " + translateResponse.code());
        }

        String translateJson = translateResponse.body().string();
        System.out.println("üîπ Translate Response: " + translateJson);

        // Step 3: Extract issued_token from JSON
        // Assuming JSON looks like: { "issued_token": "JWT-HERE" }
        String jwt = translateJson.split("\"issued_token\"\\s*:\\s*\"")[1].split("\"")[0];

        return jwt;
    }
}
