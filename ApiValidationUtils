package utils;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.Map;

public class ApiValidationUtils {

    /**
     * Fetches value from a nested JSON object using dot-path notation.
     * Supports arrays using [index], e.g.
     * "errorResponse.errorResponseDetails.errorInfo[0].code"
     */
    public static String getValueFromJson(JSONObject json, String path) {
        try {
            String[] parts = path.split("\\.");
            Object current = json;

            for (String part : parts) {
                if (part.contains("[")) { // handle arrays
                    String key = part.substring(0, part.indexOf('['));
                    int index = Integer.parseInt(part.substring(part.indexOf('[') + 1, part.indexOf(']')));
                    current = ((JSONObject) current).optJSONObject(key).optJSONArray("").get(index);

                    // If the key directly maps to array
                    if (current == null) {
                        JSONArray arr = ((JSONObject) current).optJSONArray(key);
                        current = (arr != null && arr.length() > index) ? arr.get(index) : null;
                    }
                } else {
                    if (current instanceof JSONObject) {
                        current = ((JSONObject) current).opt(part);
                    } else {
                        return "MISSING";
                    }
                }

                if (current == null) return "MISSING";
            }

            return current.toString();
        } catch (Exception e) {
            return "MISSING";
        }
    }

    /**
     * Validates multiple fields from expected map against actual JSON response.
     * Logs results in ExtentTest and console.
     */
    public static boolean validateFields(Map<String, String> expectedFields, JSONObject responseJson, ExtentTest test) {
        boolean pass = true;

        for (Map.Entry<String, String> entry : expectedFields.entrySet()) {
            String path = entry.getKey();
            String expected = entry.getValue();
            String actual = getValueFromJson(responseJson, path);

            String result = expected.equals(actual) ? "PASS" : "FAIL";
            pass = pass && result.equals("PASS");

            test.log(Status.INFO, String.format(
                    "Field validation -> %s | Expected: %s | Actual: %s | Result: %s",
                    path, expected, actual, result
            ));

            System.out.println(String.format(
                    "Field validation -> %s | Expected: %s | Actual: %s | Result: %s",
                    path, expected, actual, result
            ));
        }

        return pass;
    }
}
