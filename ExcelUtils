package com.framework.utils;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

/**
 * Generic Excel reader & writer.
 * - readSheet returns List<Map<header, value>> where value is raw string (JSON fields still contain ENC(...))
 * - writeResult writes a "Result" cell for the matching TestCaseID
 */
public class ExcelUtils {

    public static List<Map<String, String>> readSheet(String excelPath, String sheetName) throws Exception {
        List<Map<String, String>> list = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(excelPath);
             Workbook wb = new XSSFWorkbook(fis)) {
            Sheet sheet = wb.getSheet(sheetName);
            if (sheet == null) throw new IllegalArgumentException("Sheet not found: " + sheetName);

            // header
            Row headerRow = sheet.getRow(0);
            if (headerRow == null) return list;
            List<String> headers = new ArrayList<>();
            for (Cell c : headerRow) {
                c.setCellType(CellType.STRING);
                headers.add(c.getStringCellValue().trim());
            }

            for (int r = 1; r <= sheet.getLastRowNum(); r++) {
                Row row = sheet.getRow(r);
                if (row == null) continue;
                Map<String, String> map = new LinkedHashMap<>();
                boolean nonEmpty = false;
                for (int c = 0; c < headers.size(); c++) {
                    Cell cell = row.getCell(c);
                    String val = "";
                    if (cell != null) {
                        if (cell.getCellType() == CellType.NUMERIC) {
                            double d = cell.getNumericCellValue();
                            long l = (long) d;
                            val = String.valueOf(l);
                        } else {
                            cell.setCellType(CellType.STRING);
                            val = cell.getStringCellValue();
                        }
                    }
                    if (val != null && !val.trim().isEmpty()) nonEmpty = true;
                    map.put(headers.get(c), val == null ? "" : val.trim());
                }
                if (nonEmpty) list.add(map);
            }
        }
        return list;
    }

    public static void writeResult(String excelPath, String sheetName, String testCaseId, String result) throws Exception {
        FileInputStream fis = new FileInputStream(excelPath);
        Workbook wb = new XSSFWorkbook(fis);
        fis.close();

        Sheet sheet = wb.getSheet(sheetName);
        if (sheet == null) throw new IllegalArgumentException("Sheet not found: " + sheetName);

        Row header = sheet.getRow(0);
        int cols = header.getLastCellNum();
        int resultCol = -1;
        int tcCol = -1;
        for (int i = 0; i < cols; i++) {
            Cell c = header.getCell(i);
            if (c == null) continue;
            c.setCellType(CellType.STRING);
            String h = c.getStringCellValue().trim();
            if ("Result".equalsIgnoreCase(h)) resultCol = i;
            if ("TestCaseID".equalsIgnoreCase(h)) tcCol = i;
        }
        if (tcCol == -1) throw new IllegalArgumentException("TestCaseID header not found in Excel");

        if (resultCol == -1) { // append result column
            resultCol = cols;
            Cell c = header.createCell(resultCol, CellType.STRING);
            c.setCellValue("Result");
        }

        boolean updated = false;
        for (int r = 1; r <= sheet.getLastRowNum(); r++) {
            Row row = sheet.getRow(r);
            if (row == null) continue;
            Cell tcCell = row.getCell(tcCol);
            if (tcCell == null) continue;
            tcCell.setCellType(CellType.STRING);
            String tc = tcCell.getStringCellValue().trim();
            if (tc.equals(testCaseId)) {
                Cell res = row.getCell(resultCol);
                if (res == null) res = row.createCell(resultCol, CellType.STRING);
                res.setCellValue(result);
                updated = true;
                break;
            }
        }

        try (FileOutputStream fos = new FileOutputStream(excelPath)) {
            wb.write(fos);
        }
        wb.close();

        if (!updated) throw new IllegalStateException("Could not find TestCaseID " + testCaseId + " to write result");
    }
}        }
        wb.close();

        if (!updated) throw new IllegalStateException("Could not find TestCaseID " + testCaseId + " to write result");
    }
}

/**
     * Very small JSON-to-Map parser for simple flat JSON objects such as:
     * {"key":"value","k2":"v2"}
     * It ignores whitespace and does not support nested objects/arrays.
     */
    public static Map<String,String> jsonToMap(String json) {
        Map<String,String> map = new LinkedHashMap<>();
        if (json == null || json.trim().isEmpty()) return map;

        String trimmed = json.trim();
        if (trimmed.startsWith("{") && trimmed.endsWith("}")) {
            trimmed = trimmed.substring(1, trimmed.length()-1);
        }
        // split by comma that are not inside quotes (simple case: no nested JSON)
        String[] pairs = trimmed.split("\\s*,\\s*");
        for (String p : pairs) {
            if (p.isEmpty()) continue;
            String[] kv = p.split("\\s*:\\s*", 2);
            if (kv.length == 2) {
                String key = kv[0].trim();
                String val = kv[1].trim();
                // strip quotes if present
                if (key.startsWith("\"") && key.endsWith("\"")) {
                    key = key.substring(1, key.length()-1);
                }
                if (val.startsWith("\"") && val.endsWith("\"")) {
                    val = val.substring(1, val.length()-1);
                }
                map.put(key, val);
            }
        }
        return map;
    }
