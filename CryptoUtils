package com.framework.utils;

import com.framework.config.ConfigManager;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Base64;

/**
 * AES decrypt/encrypt using key stored as Base64 in encryption.key.
 * This uses AES/ECB/PKCS5Padding for simplicity (for PoC). Prefer AES-GCM in production.
 */
public class CryptoUtils {
    private static final String ALGO = "AES/ECB/PKCS5Padding";
    private static SecretKeySpec keySpec;

    private static void ensureKeyLoaded() throws Exception {
        if (keySpec != null) return;
        String keyPath = ConfigManager.getEncryptionKeyFilePath();
        if (keyPath == null) throw new IllegalStateException("encryption.key not configured");
        byte[] keyBytes = Files.readAllBytes(Paths.get(keyPath));
        String base64 = new String(keyBytes).trim();
        byte[] decoded = Base64.getDecoder().decode(base64);
        keySpec = new SecretKeySpec(decoded, "AES");
    }

    public static String encrypt(String plain) throws Exception {
        ensureKeyLoaded();
        Cipher cipher = Cipher.getInstance(ALGO);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec);
        byte[] enc = cipher.doFinal(plain.getBytes());
        return Base64.getEncoder().encodeToString(enc);
    }

    public static String decrypt(String encBase64) throws Exception {
        ensureKeyLoaded();
        Cipher cipher = Cipher.getInstance(ALGO);
        cipher.init(Cipher.DECRYPT_MODE, keySpec);
        byte[] decoded = Base64.getDecoder().decode(encBase64);
        byte[] dec = cipher.doFinal(decoded);
        return new String(dec);
    }

    /** Decrypts if value is of form ENC(xxx) else returns value */
    public static String resolve(String value) throws Exception {
        if (value == null) return null;
        value = value.trim();
        if (value.startsWith("ENC(") && value.endsWith(")")) {
            String payload = value.substring(4, value.length() - 1);
            return decrypt(payload);
        }
        return value;
    }
}
