use ExtentSparkReporter

To integrate **ExtentSparkReporter** for detailed, interactive reporting, follow these code changes for your automation framework files. SparkReporter is part of the ExtentReports family, providing a modern and highly visual HTML experience.

***

### 1. Global Setup (Example for Initialization)

Add this to your framework setup code (preferably in a Base class or a static block):

```java
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;

public class ReportManager {
    public static ExtentReports extent;
    public static ExtentTest test;

    static {
        ExtentSparkReporter spark = new ExtentSparkReporter("test-output/ExtentSpark.html");
        extent = new ExtentReports();
        extent.attachReporter(spark);
    }
}
```

***

### 2. TestExecutor Integration

Replace all previous Extent* references with **ReportManager**'s statics. Use detailed logging at every major step:

```java
public static void runCase(Map<String, String> row) throws Exception {
    String testId = row.getOrDefault("TestCaseID", "").trim();
    ReportManager.test = ReportManager.extent.createTest("TestCase: " + testId);

    String branchNum = row.getOrDefault("Branch number", "").trim();
    String accNum = row.getOrDefault("AccountNumber", "").trim();
    String expectedStatus = row.getOrDefault("ExpectedStatus", "").trim();
    String expectedResponseCode = row.getOrDefault("Response code", "").trim();

    String prodId = "";
    if (!branchNum.isEmpty() && !accNum.isEmpty()) prodId = branchNum + accNum;
    else if (!branchNum.isEmpty()) prodId = branchNum;
    else if (!accNum.isEmpty()) prodId = accNum;

    ReportManager.test.info("TestCaseID: " + testId);
    ReportManager.test.info("PROD_ID constructed: " + prodId);

    long start = System.currentTimeMillis();

    String jwt = JwtFetcher.generateToken();
    Map<String, String> headers = HeaderUtils.buildHeaders(jwt, prodId);
    ReportManager.test.info("JWT generated. Headers: " + headers);

    Map<String, Object> responseMap = ApiUtils.callApi("py22.api.url", headers, null, "GET");
    ReportManager.test.info("API call made, got response map: " + responseMap);

    int statusCode = (int) responseMap.getOrDefault("statusCode", 0);
    Map<String, String> flatResponse = (Map<String, String>) responseMap.get("responseBody");

    String actualResponseCode = flatResponse.getOrDefault("responseCode", "");
    String actualErrorCode = flatResponse.getOrDefault("errorCode", "");

    ReportManager.test.info("HTTP Status: " + statusCode);
    ReportManager.test.info("ActualResponseCode: " + actualResponseCode);
    ReportManager.test.info("ActualErrorCode: " + actualErrorCode);

    String result;
    if (statusCode == 200) {
        result = expectedResponseCode.equals(actualResponseCode) ? "PASS" : "FAIL";
        ReportManager.test.info("VALIDATION: comparing expectedResponseCode [" + expectedResponseCode +
                "] with actualResponseCode [" + actualResponseCode + "]");
    } else {
        result = expectedResponseCode.equals(actualErrorCode) ? "PASS" : "FAIL";
        ReportManager.test.info("VALIDATION: comparing expectedResponseCode [" + expectedResponseCode +
                "] with actualErrorCode [" + actualErrorCode + "]");
    }

    long durationSec = (System.currentTimeMillis() - start) / 1000;
    ReportManager.test.info("Test Duration: " + durationSec + " seconds");
    ReportManager.test.info("Result: " + result);

    if ("PASS".equals(result)) {
        ReportManager.test.pass("Test Passed");
    } else {
        ReportManager.test.fail("Test Failed");
    }

    ExcelUtils.writeResultWithDuration("src/test/resources/testdata.xlsx", "PY22", testId, result, durationSec);

    ReportManager.extent.flush();
}
```

***

### 3. ApiUtils Logging Integration

Ensure `ApiUtils` logs via the current test:

```java
public static Map<String, Object> callApi(String configKey, Map<String, String> headers, String body, String method) throws Exception {
    String apiUrl = ConfigReader.get(configKey);
    if (apiUrl == null || apiUrl.isBlank())
        throw new RuntimeException("Missing API URL for key: " + configKey);

    if (ReportManager.test != null) ReportManager.test.info("API URL: " + apiUrl);
    if (ReportManager.test != null) ReportManager.test.info("HTTP Method: " + method);
    if (ReportManager.test != null) ReportManager.test.info("Headers: " + headers);
    if (ReportManager.test != null && body != null) ReportManager.test.info("Request Body: " + body);

    URL url = new URL(apiUrl);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    conn.setRequestMethod(method);
    conn.setConnectTimeout(10000);
    conn.setReadTimeout(15000);

    for (Map.Entry<String, String> entry : headers.entrySet()) {
        conn.setRequestProperty(entry.getKey(), entry.getValue());
    }

    int statusCode = conn.getResponseCode();
    if (ReportManager.test != null) ReportManager.test.info("HTTP Status Code: " + statusCode);

    BufferedReader reader = new BufferedReader(new InputStreamReader(
            statusCode < 400 ? conn.getInputStream() : conn.getErrorStream()
    ));

    StringBuilder response = new StringBuilder();
    String line;
    while ((line = reader.readLine()) != null) response.append(line);
    reader.close();

    if (ReportManager.test != null) ReportManager.test.info("Raw Response: " + response);

    Map<String, Object> result = new HashMap<>();
    result.put("statusCode", statusCode);
    Map<String, String> flat = JsonUtils.jsonToFlatMap(response.toString());
    result.put("responseBody", flat);

    if (ReportManager.test != null) ReportManager.test.info("Flattened Response: " + flat);

    return result;
}
```

***

### 4. pY22Tests Integration

Update your test classes:

```java
@Test(description = "TC01 - Valid PROD_ID")
public void TC01_Valid_PROD_ID() throws Exception {
    ReportManager.test = ReportManager.extent.createTest("PY22 TC01 Valid PROD_ID");
    ReportManager.test.info("Starting test: TC01_Valid_PROD_ID");
    Map<String, String> data = ExcelUtils.getRowByTestId(EXCEL_PATH, SHEET, "TC01_SC01_PY22_Valid_PROD_ID");
    TestExecutor.runCase(data);
    ReportManager.test.info("Finished test: TC01_Valid_PROD_ID");
}
```

***

### Summary Table

| Step           | Change                                                                    |
|----------------|---------------------------------------------------------------------------|
| Reporter Setup | Use `ExtentSparkReporter` in a shared `ReportManager`                     |
| Logging        | Log every test and API workflow step using `ReportManager.test`           |
| Flushing       | Call `ReportManager.extent.flush()` after each test to update the report  |

With these changes, your Spark report will include all relevant details — test input, headers, API calls, payload, validation steps, comparison, and result explanations — in a clean, graphical HTML dashboard. This greatly aids debugging and test root cause analysis.

