 package org.framework.utils;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.framework.config.ConfigManager;

import java.io.IOException;
import java.util.Map;

/**
 * Fetches JWT via SSO authenticate -> tokenTranslator (translate) flow.
 * Reads endpoints from config.properties.
 */
public final class JwtFetcher {

    private static final OkHttpClient client = new OkHttpClient.Builder().build();
    private static final ObjectMapper M = new ObjectMapper();

    private JwtFetcher() {}

    public static String fetchJwt(String username) throws IOException {
        if (username == null || username.isBlank()) throw new IllegalArgumentException("username required");

        String ssoBase = ConfigManager.get("sso.authenticate.url");
        String ssoAuthIndex = ConfigManager.get("sso.auth.index", "TestTree"); // static per requirement
        String ssoUrl = ssoBase.contains("?") ? ssoBase + "&authIndexValue=" + ssoAuthIndex : ssoBase + "?authIndexValue=" + ssoAuthIndex;
        String acceptApi = ConfigManager.get("sso.accept-api-version", "protocol=1.0,resource=2.1");
        String translateUrl = ConfigManager.get("sso.translate.url");

        // 1) authenticate to get tokenId (SSO token)
        Request ssoReq = new Request.Builder()
                .url(ssoUrl)
                .post(RequestBody.create(new byte[0]))
                .addHeader("X-OpenAM-Username", username)
                .addHeader("Accept-API-Version", acceptApi)
                .addHeader("Content-Type", "application/json")
                .build();

        try (Response ssoResp = client.newCall(ssoReq).execute()) {
            if (!ssoResp.isSuccessful()) throw new IOException("SSO authenticate failed: " + ssoResp.code());
            String ssoBody = ssoResp.body() != null ? ssoResp.body().string() : "";
            JsonNode ssoJson = M.readTree(ssoBody);
            String tokenId = null;
            if (ssoJson.has("tokenId")) tokenId = ssoJson.get("tokenId").asText();
            else if (ssoJson.has("token") && ssoJson.get("token").has("tokenId"))
                tokenId = ssoJson.get("token").get("tokenId").asText();
            if (tokenId == null || tokenId.isBlank()) throw new IOException("SSO response missing tokenId. Body: " + ssoBody);
            System.out.println("[JwtFetcher] SSO tokenId: " + tokenId);

            // 2) translate to JWT
            Map<String,Object> root = Map.of(
                    "input_token_state", Map.of("token_type", "SSOTOKEN", "tokenId", tokenId),
                    "output_token_state", Map.of("token_type", "JWT")
            );
            String translateBody = M.writeValueAsString(root);
            Request trReq = new Request.Builder()
                    .url(translateUrl)
                    .post(RequestBody.create(translateBody, MediaType.parse("application/json")))
                    .addHeader("Content-Type", "application/json")
                    .build();

            try (Response trResp = client.newCall(trReq).execute()) {
                if (!trResp.isSuccessful()) throw new IOException("Translate failed: " + trResp.code());
                String trBody = trResp.body() != null ? trResp.body().string() : "";
                JsonNode trJson = M.readTree(trBody);
                String jwt = null;
                if (trJson.has("issued_token")) jwt = trJson.get("issued_token").asText();
                else if (trJson.has("token") && trJson.get("token").has("issued_token"))
                    jwt = trJson.get("token").get("issued_token").asText();
                if (jwt == null || jwt.isBlank()) throw new IOException("Translate response missing issued_token. Body: " + trBody);
                System.out.println("[JwtFetcher] JWT length=" + jwt.length());
                return jwt;
            }
        }
    }
}
