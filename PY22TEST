package com.example.tests;

import org.testng.annotations.*;
import java.util.*;
import java.io.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import java.net.http.*;
import java.net.*;
import java.time.*;

public class PY22Test {

    private static final String EXCEL_PATH = "src/test/resources/testdata/PY22Data.xlsx";
    private static final String API_URL = "https://digitaldev-int-rbwm.systems.uk.hsbc/cb-rps-05/gb-hbeu-rps-pap-acct-mainopts-dlts-enq-sct-internal-proxy/v1/acct/";

    private String jwtToken;

    @BeforeClass
    public void setup() throws Exception {
        // Generate or fetch JWT dynamically (replace this with your actual JWT service)
        jwtToken = "YOUR_DYNAMIC_JWT_TOKEN_HERE";
        System.out.println("âœ… JWT generated successfully.");
    }

    @DataProvider(name = "py22Data")
    public Iterator<Object[]> getData() throws Exception {
        List<Object[]> data = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(EXCEL_PATH);
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {
            XSSFSheet sheet = workbook.getSheetAt(0);
            int rows = sheet.getPhysicalNumberOfRows();

            for (int i = 1; i < rows; i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;

                Map<String, String> map = new LinkedHashMap<>();
                map.put("TestCaseID", row.getCell(0).getStringCellValue());
                map.put("BranchNumber", row.getCell(1).getStringCellValue());
                map.put("AccountNumber", row.getCell(2).getStringCellValue());
                map.put("ExpectedFields", row.getCell(3).getStringCellValue());
                map.put("ErrorCode", row.getCell(4).getStringCellValue());
                map.put("ExpectedStatus", row.getCell(5).getStringCellValue());
                data.add(new Object[]{map});
            }
        }
        return data.iterator();
    }

    @Test(dataProvider = "py22Data")
    public void callPY22Api(Map<String, String> row) throws Exception {
        String testCaseId = row.get("TestCaseID");
        String acctNumber = row.get("AccountNumber");
        System.out.println("\n=== Running TestCase: " + testCaseId + " ===");

        String url = API_URL + acctNumber + "/mainopts-dits";
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("X-HSBC-Locale", "en-GB")
                .header("X-HSBC-Chal-CountryCode", "GB")
                .header("X-HSBC-Chnl-Group-Member", "HBEU")
                .header("X-HSBC-User-Id", "C12345678")
                .header("X-HSBC-CAM-Level", "40")
                .header("X-HSBC-Channel-Id", "OHB")
                .header("X-HSBC-E2E-Trust-Token", jwtToken)
                .header("X-HSBC-Client-Id", "25b5dfb6bb584c708801082c884f15d2")
                .header("X-HSBC-Client-Secret", "68C1516505514180bf211DA13396AD1C")
                .header("X-HSBC-Operator-Service-Unit-Id", row.get("BranchNumber"))
                .header("accept-language", "en")
                .GET()
                .build();

        Instant start = Instant.now();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
        Instant end = Instant.now();

        long duration = Duration.between(start, end).toSeconds();
        int statusCode = response.statusCode();
        String result = (statusCode == 200) ? "PASS" : "FAIL";

        System.out.println("Response Code: " + statusCode);
        System.out.println("Duration: " + duration + " sec");
        System.out.println("Result: " + result);

        writeResultToExcel(testCaseId, result, duration);
    }

    private void writeResultToExcel(String testCaseId, String result, long duration) throws Exception {
        try (FileInputStream fis = new FileInputStream(EXCEL_PATH);
             XSSFWorkbook workbook = new XSSFWorkbook(fis)) {
            XSSFSheet sheet = workbook.getSheetAt(0);
            int rows = sheet.getPhysicalNumberOfRows();

            for (int i = 1; i < rows; i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;
                if (row.getCell(0).getStringCellValue().equals(testCaseId)) {
                    row.createCell(6).setCellValue(result);
                    row.createCell(7).setCellValue(duration);
                }
            }

            try (FileOutputStream fos = new FileOutputStream(EXCEL_PATH)) {
                workbook.write(fos);
            }
        }
    }
}
