package tests;

import com.aventstack.extentreports.*;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import io.restassured.response.Response;
import org.framework.config.ConfigManager;
import org.framework.utils.*;
import org.testng.annotations.*;

import java.lang.reflect.Method;
import java.util.*;
import static io.restassured.RestAssured.given;

public class PY22Test {

    private static ExtentReports extent;
    private ExtentTest test;
    private TestLogger logger;

    private static final String EXCEL_PATH = ConfigManager.get("excel.path");
    private static final String SHEET_NAME = "PY22";
    private static final String PLM_QUERY = ConfigManager.get("PLMQuery");
    private static final String PY22_URL = ConfigManager.get("py22.url");

    // ==================== REPORT SETUP ====================
    @BeforeSuite
    public void beforeSuite() {
        extent = new ExtentReports();
        extent.attachReporter(new ExtentSparkReporter("ExtentReport_PY22.html"));
    }

    @AfterSuite
    public void afterSuite() {
        extent.flush();
    }

    @BeforeMethod
    public void beforeMethod(Method method) {
        test = extent.createTest(method.getName());
        logger = new TestLogger(test);
    }

    // ==================== DATA PROVIDER ====================
    @DataProvider(name = "py22Data")
    public Object[][] py22Data() throws Exception {
        List<Map<String, String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] data = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) {
            data[i][0] = rows.get(i);
        }
        return data;
    }

    // ==================== TEST ====================
    @Test(dataProvider = "py22Data")
    public void PY22_Test(Map<String, String> row) throws Exception {
        String testId        = row.get("TestCaseID");
        String branch        = row.get("Branch");
        String account       = row.get("Account");
        String expectedStatus= row.get("ExpectedStatus");
        String expectedFields= row.get("ExpectedFieldsJson");
        boolean fetchDb      = Boolean.parseBoolean(row.getOrDefault("FetchDb", "false"));

        runTest(testId, branch, account, expectedStatus, expectedFields, fetchDb);
    }

    // ==================== CORE TEST EXECUTION ====================
    private void runTest(String testId, String branch, String account,
                         String expectedStatus, String expectedFields, boolean fetchDb) throws Exception {
        long startTime = System.currentTimeMillis();

        try {
            logger.section(testId);

            String prodId = (branch.isEmpty() || account.isEmpty()) ? "" : branch + account;
            logger.info("PROD_ID: " + (prodId.isEmpty() ? "[EMPTY]" : prodId));

            // API Call
            Response response = callPY22Api(prodId);
            logger.info("Status: " + response.getStatusCode() + " | Time: " + response.getTime() + "ms");

            // Validations
            boolean statusOk = ApiValidator.validateStatus(response, expectedStatus, logger);

            if (fetchDb) {
                fetchDbData(prodId);
            } else {
                logger.info("⊘ DB fetch skipped");
            }

            boolean fieldsOk = ApiValidator.validateFields(response, expectedFields, logger);

            // Result
            long duration = (System.currentTimeMillis() - startTime) / 1000;
            if (statusOk && fieldsOk) {
                logger.pass("✓ TEST PASSED in " + duration + "s");
                ExcelUtils.writeResultWithDuration(EXCEL_PATH, SHEET_NAME, testId, "PASS", duration);
            } else {
                logger.fail("✗ TEST FAILED in " + duration + "s");
                ExcelUtils.writeResultWithDuration(EXCEL_PATH, SHEET_NAME, testId, "FAIL", duration);
                throw new AssertionError("Validation failed");
            }

        } catch (Exception e) {
            logger.fail("✗ Error: " + e.getMessage());
            throw e;
        }
    }

    // ==================== API CALL ====================
    private Response callPY22Api(String prodId) {
        return given()
                .headers(getPY22Headers())
                .get(PY22_URL + (prodId.isEmpty() ? "" : "?prodId=" + prodId))
                .then()
                .extract()
                .response();
    }

    private Map<String, String> getPY22Headers() {
        Map<String, String> headers = new HashMap<>();
        headers.put("Authorization", "Basic " +
                Base64.getEncoder().encodeToString("tavonh:Raa@1126".getBytes()));
        headers.put("Content-Type", "application/json");
        headers.put("X-HSBC-Locale", "en_GB");
        headers.put("X-HSBC-Chnl-CountryCode", "GB");
        headers.put("X-HSBC-Chnl-Group-Member", "HBEU");
        headers.put("X-HSBC-User-Id", "C12345678");
        headers.put("X-HSBC-CAM-Level", "40");
        headers.put("X-HSBC-Channel-Id", "OHB");
        headers.put("X-HSBC-Src-Device-Id", "1234");
        headers.put("X-HSBC-Src-UserAgent", "Apache-HttpClient/4.5.6 (Java/1.8.0_112)");
        headers.put("X-HSBC-Request-Correlation-Id", "shubham");
        headers.put("X-HSBC-Consumer-Id", "GBHBEU_CMB.MOBILE_I");
        headers.put("X-HSBC-IP-Id", "136.46.24.54");
        headers.put("X-HSBC-Bene-Type", "RSP9");
        headers.put("X-HSBC-Client-Id", "25b5dfb6bb584c708801082c884f15d2");
        headers.put("X-HSBC-Client-Secret", "68Cf51e5D5514180bf211DA13396AD1C");
        return headers;
    }

    // ==================== DB FETCH ====================
    private void fetchDbData(String prodId) {
        if (PLM_QUERY == null || PLM_QUERY.isBlank()) {
            logger.warn("⊘ DB query not configured");
            return;
        }

        try {
            List<Map<String, String>> dbData = DBUtils.fetchRata(PLM_QUERY, prodId);
            if (dbData != null && !dbData.isEmpty()) {
                logger.pass("✓ DB rows: " + dbData.size());
                List<String> columns = new ArrayList<>(dbData.get(0).keySet());
                DBUtils.logDbDataInTable(dbData, columns, logger::info);
            } else {
                logger.warn("⚠ No DB records for PROD_ID: " + prodId);
            }
        } catch (Exception e) {
            logger.fail("DB error: " + e.getMessage());
        }
    }
}
