package tests;

import com.aventstack.extentreports.*;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.framework.config.ConfigManager;
import org.framework.utils.ExcelUtils;
import org.framework.utils.JsonUtils;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.*;

import java.lang.reflect.Method;
import java.util.*;

public class PY22Test {

    private static ExtentReports extent;
    private ExtentTest test;
    private static final String EXCEL_PATH = ConfigManager.get("excel.path");
    private static final String SHEET_NAME = "PY22";

    @DataProvider(name = "py22Data")
    public Object[][] py22Data() throws Exception {
        List<Map<String, String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] out = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) out[i][0] = rows.get(i);
        return out;
    }

    @BeforeSuite
    public void beforeSuite() {
        ExtentSparkReporter spark = new ExtentSparkReporter("ExtentReport.html");
        extent = new ExtentReports();
        extent.attachReporter(spark);
    }

    @AfterSuite
    public void afterSuite() {
        extent.flush();
    }

    @BeforeMethod
    public void beforeMethod(Method method) {
        test = extent.createTest(method.getName());
    }

    @Test(dataProvider = "py22Data")
    public void callpy22Api(Map<String, String> row) throws Exception {
        long startTime = System.currentTimeMillis();

        String testid = row.getOrDefault("TestCaseID", "").trim();
        String branchNumber = row.getOrDefault("BranchNumber", "").trim();
        String accountNumber = row.getOrDefault("AccountNumber", "").trim();
        String expectedFieldsJson = row.getOrDefault("ExpectedFields", "").trim();
        String responseCode = row.getOrDefault("ResponseCode", "").trim();
        String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

        String prodid = (!branchNumber.isEmpty() && !accountNumber.isEmpty()) ?
                branchNumber + accountNumber : "";

        logBoth("=== Running PY22 test: " + testid + " (PROD_ID='" + prodid + "') ===");
        logBoth("Constructed PROD_ID: " + prodid);

        // Call API
        Response response = callApi(prodid);

        // Extract response details
        int status = response.statusCode();
        String body = response.asString();

        logBoth("HTTP Status: " + status);
        logBoth("Response Body (truncated): " + (body.length() > 500 ? body.substring(0, 500) + "..." : body));

        // Validate status
        if (!expStatusStr.isBlank()) {
            int expStatus = Integer.parseInt(expStatusStr);
            Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testid);
            logBoth("Expected HTTP status matched: " + expStatus);
        }

        // Flatten response for field-wise validation
        List<Map<String, String>> apiData = JsonUtils.jsonToListOfMaps(body);

        // Prepare expected fields
        Map<String, String> expectedFields = new HashMap<>();
        if (!expectedFieldsJson.isBlank()) {
            JSONObject expJson = new JSONObject(expectedFieldsJson);
            for (String k : expJson.keySet()) {
                expectedFields.put(k, expJson.get(k).toString());
            }
        }

        // Validate fields
        boolean pass = true;
        String failReason = "";

        for (Map<String, String> record : apiData) {
            for (Map.Entry<String, String> entry : expectedFields.entrySet()) {
                String key = entry.getKey();
                String expectedVal = entry.getValue();

                String actualVal = record.entrySet().stream()
                        .filter(e -> e.getKey().endsWith(key))
                        .map(Map.Entry::getValue)
                        .findFirst()
                        .orElse(null);

                if (actualVal == null || !expectedVal.equals(actualVal)) {
                    pass = false;
                    failReason = "Mismatch for field: " + key +
                            " | Expected: " + expectedVal +
                            " | Actual: " + actualVal;
                    logBoth(failReason);
                } else {
                    logBoth("Field validation passed → " + key +
                            " | Expected: " + expectedVal +
                            " | Actual: " + actualVal);
                }
            }
        }

        if (!pass) {
            Assert.fail("Field validation failed: " + failReason);
        } else {
            logBoth("All expected fields validated successfully.");
        }

        long durationSec = (System.currentTimeMillis() - startTime) / 1000;
        ExcelUtils.writeResultWithDuration(EXCEL_PATH, SHEET_NAME, testid,
                pass ? "PASS" : "FAIL: " + failReason, durationSec);

        if (pass) {
            logPass("Test passed for " + testid + " in " + durationSec + " sec");
        } else {
            logFail("Field validation failed for " + testid + " | Reason: " + failReason);
        }

        logBoth("=== End of Test: " + testid + " (Duration: " + durationSec + " sec) ===\n");
    }

    private Response callApi(String prodid) {
        logBoth("Step: Preparing headers and calling PY22 API...");

        String url = ConfigManager.get("py22.url");

        Response response = RestAssured
                .given()
                .baseUri(url)
                .auth().preemptive().basic("tavonh", "Raa@1126")
                .header("Content-Type", "application/json")
                .header("X-HSBC-Locale", "en_GB")
                .header("X-HSBC-Chnl-CountryCode", "GB")
                .header("X-HSBC-Chnl-Group-Member", "HBEU")
                .header("X-HSBC-User-Id", "C12345678")
                .header("X-HSBC-CAM-Level", "40")
                .header("X-HSBC-Channel-Id", "OHB")
                .header("X-HSBC-Src-Device-Id", "1234")
                .header("X-HSBC-Session-Correlation-Id", "q2")
                .header("X-HSBC-Src-UserAgent", "Apache-HttpClient/4.5.6 (Java/1.8.0_112)")
                .header("X-HSBC-Request-Correlation-Id", "shubham")
                .header("X-HSBC-Consumer-Id", "GBHBEU_CMB.MOBILE_I")
                .header("X-HSBC-IP-Id", "136.46.24.54")
                .header("X-HSBC-Bene-Type", "RSP9")
                .header("X-HSBC-Client-Id", "25b5dfb6bb584c708801082c884f15d2")
                .header("X-HSBC-Client-Secret", "68Cf51e5D5514180bf211DA13396AD1C")
                .header("X-HSBC-Sort-Code", "000001")
                .header("X-HSBC-Operator-Service-Unit-Id", "400521")
                .header("X-HSBC-Operator-Institution-Id", "Z")
                .header("accept-language", "en")
                .log().all()
        .when()
                .get()
        .then()
                .log().all()
                .extract().response();

        logBoth("API called successfully → Status: " + response.statusCode());
        return response;
    }

    // Logging helpers
    private void logBoth(String msg) {
        test.log(Status.INFO, msg);
        Reporter.log(msg, true);
    }

    private void logPass(String msg) {
        test.log(Status.PASS, msg);
        Reporter.log("[PASS] " + msg, true);
    }

    private void logFail(String msg) {
        test.log(Status.FAIL, msg);
        Reporter.log("[FAIL] " + msg, true);
    }
}
