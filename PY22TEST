package tests;

import com.aventstack.extentreports.*;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import okhttp3.*;
import org.framework.config.ConfigManager;
import org.framework.utils.ExcelUtils;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.*;

import java.lang.reflect.Method;
import java.util.*;
import java.util.Base64;

public class PY22Test {

    private static ExtentReports extent;
    private ExtentTest test;
    private final OkHttpClient client = new OkHttpClient();

    private static final String EXCEL_PATH = ConfigManager.get("excel.path");
    private static final String SHEET_NAME = "PY22";
    private static final String PY22_URL = ConfigManager.get("py22.url");

    // -------------------------- DATA PROVIDER --------------------------
    @DataProvider(name = "py22Data")
    public Object[][] py22Data() throws Exception {
        List<Map<String, String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] out = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) out[i][0] = rows.get(i);
        return out;
    }

    // -------------------------- EXTENT SETUP --------------------------
    @BeforeSuite
    public void beforeSuite() {
        ExtentSparkReporter spark = new ExtentSparkReporter("ExtentReport.html");
        extent = new ExtentReports();
        extent.attachReporter(spark);
    }

    @AfterSuite
    public void afterSuite() {
        extent.flush();
    }

    @BeforeMethod
    public void beforeMethod(Method method) {
        test = extent.createTest(method.getName());
    }

    // -------------------------- TEST CASE 1 --------------------------
    @Test(dataProvider = "py22Data")
    public void TC01_validateResponseCodeAndStatus(Map<String, String> row) throws Exception {
        String testId = row.getOrDefault("TestCaseID", "").trim();
        if (!"TC01".equalsIgnoreCase(testId)) return; // Run only TC01

        logBoth("=== Running PY22 TestCase: " + testId + " ===");

        String branchNum = row.getOrDefault("BranchNumber", "").trim();
        String accNum = row.getOrDefault("AccountNumber", "").trim();
        String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();
        String expResponseCode = row.getOrDefault("ResponseCode", "").trim();

        String prodId = (!branchNum.isEmpty() && !accNum.isEmpty()) ? branchNum + accNum : " ";
        logBoth("Constructed PROD_ID: " + prodId);

        // üîπ Call API
        Response response = callApi(prodId);

        int actualCode = response.code();
        String body = response.body() != null ? response.body().string() : "";
        logBoth("HTTP Status: " + actualCode);
        logBoth("Response Body (truncated): " + (body.length() > 400 ? body.substring(0, 400) + "..." : body));

        // üîπ Assertions
        try {
            Assert.assertEquals(String.valueOf(actualCode), expResponseCode, "Response code mismatch");
            Assert.assertTrue(body.contains(expStatusStr), "Expected status not found in response!");
            logPass("Test Passed for: " + testId);
        } catch (AssertionError e) {
            logFail("Test Failed for: " + testId + " ‚Üí " + e.getMessage());
            throw e;
        }
    }

    // -------------------------- API CALL FUNCTION --------------------------
    private Response callApi(String prodId) throws Exception {
        logBoth("Step: Preparing HTTP headers for API call");

        // Basic Auth header
        String credentials = "tavonh:Raa@1126";
        String basicAuth = "Basic " + Base64.getEncoder().encodeToString(credentials.getBytes());

        Headers.Builder headerBuilder = new Headers.Builder()
                .add("Authorization", basicAuth)
                .add("Content-Type", "application/json")
                .add("X-HSBC-Locale", "en_GB")
                .add("X-HSBC-Chnl-CountryCode", "GB")
                .add("X-HSBC-Chnl-Group-Member", "HBEU")
                .add("X-HSBC-User-Id", "C12345678")
                .add("X-HSBC-CAM-Level", "40")
                .add("X-HSBC-Channel-Id", "OHB")
                .add("X-HSBC-Src-Device-Id", "1234")
                .add("X-HSBC-Session-Correlation-Id", "q2")
                .add("X-HSBC-Src-UserAgent", "Apache-HttpClient/4.5.6 (Java/1.8.0_112)")
                .add("X-HSBC-Request-Correlation-Id", "shubham")
                .add("X-HSBC-Consumer-Id", "GBHBEU_CMB.MOBILE")
                .add("X-HSBC-IP-Id", "136.46.24.54")
                .add("X-HSBC-Bene-Type", "RSP9")
                .add("X-HSBC-Client-Id", "25b5dfb6bb584c7088010820884f15d2")
                .add("X-HSBC-Client-Secret", "68C1518505514180b1211DA13396AD1C");

        Headers headers = headerBuilder.build();

        String bodyJson = "{\"productId\":\"" + prodId + "\"}";
        RequestBody body = RequestBody.create(bodyJson, MediaType.parse("application/json"));

        String url = PY22_URL;
        logBoth("Step: Calling PY22 API ‚Üí " + url);

        Request request = new Request.Builder()
                .url(url)
                .headers(headers)
                .post(body)
                .build();

        return client.newCall(request).execute();
    }

    // -------------------------- LOG HELPERS --------------------------
    private void logBoth(String msg) {
        System.out.println("[PY22Test] " + msg);
        test.info(msg);
    }

    private void logPass(String msg) {
        System.out.println("‚úÖ " + msg);
        test.pass(msg);
    }

    private void logFail(String msg) {
        System.err.println("‚ùå " + msg);
        test.fail(msg);
    }
}
