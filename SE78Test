@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {

    String testId       = row.getOrDefault("TestCaseID", "").trim();
    String chargeId     = row.getOrDefault("ChargeID", "").trim();
    String headers      = row.getOrDefault("Headers", "").trim();
    String expected     = row.getOrDefault("ExpectedOutput", "").trim();
    String expectedCode = row.getOrDefault("ErrorCode", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    // ----- DB Check -----
    String dbMessage = "ChargeID not checked";
    if (!chargeId.isEmpty()) {
        Set<String> chargeData = DbFetchHelper.fetchChargeJoinData(chargeId);
        if (!chargeData.isEmpty()) {
            String[] parts = chargeData.iterator().next().split("\\|");
            String openStatus = parts[2];
            dbMessage = "DB: ChargeID found with OPEN_CLO_STA='" + openStatus + "'";
        } else {
            dbMessage = "DB: ChargeID not found in DB";
        }
    } else {
        dbMessage = "DB: ChargeID is empty";
    }
    logBoth(dbMessage);

    // ----- Headers & API Call -----
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;

    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v != null && v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v == null ? "" : v);
        }
    }
    if (!trustTokenPresent) headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);

    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("HTTP " + status + " | Response (truncated): " +
            (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Status validation -----
    if (!expStatusStr.isBlank()) {
        int expStatus = Integer.parseInt(expStatusStr);
        Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testId);
        logBoth("Expected HTTP status matched: " + expStatus);
    }

    // ----- Error code / JSON validation -----
    boolean pass = true;
    String failReason = "";

    if (expected.isBlank()) {
        if (!expectedCode.isBlank()) {
            String actual = extractNestedErrorCode(responseJson);
            if (!expectedCode.equals(actual)) {
                pass = false;
                failReason = "Expected error code " + expectedCode + " but got " + actual;
            }
        }
    } else {
        try {
            JSONObject expJson = new JSONObject(expected);
            pass = jsonContains(expJson, responseJson);
            if (!pass) failReason = "Response JSON does not contain ExpectedOutput";
        } catch (Exception ex) {
            pass = false;
            failReason = "Validation error: " + ex.getMessage();
        }
    }

    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);
    Assert.assertTrue(pass, "SE78 test failed for " + testId + " : " + failReason);
}
