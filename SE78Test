@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {

    long startTime = System.currentTimeMillis();

    String testId       = row.getOrDefault("TestCaseID", "").trim();
    String chargeld     = row.getOrDefault("ChargeID", "").trim();
    String headers      = row.getOrDefault("Headers", "").trim();
    String expectedFieldsJson = row.getOrDefault("ExpectedFields", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("Step: Starting test case " + testId);

    // ----- Determine validation type -----
    boolean isDbRequired = DB_REQUIRED_TESTS.contains(testId);
    boolean isExcelValidationRequired = !expectedFieldsJson.isBlank();

    // ----- Fetch DB data (if required) -----
    List<Map<String, String>> dbData = null;
    String dbFormStatus = "", dbCycCnt = "";

    if (isDbRequired && !chargeld.isEmpty()) {
        logBoth("Step: Fetching DB data for ChargeID " + chargeld);
        try {
            dbData = DbFetchHelper.fetchData(chargeQuery, chargeld);
            if (dbData != null && !dbData.isEmpty()) {
                Map<String, String> dbRow = dbData.get(0);
                dbFormStatus = dbRow.getOrDefault("CHG_FORM_STA", "");
                dbCycCnt = dbRow.getOrDefault("CYC_CNT",
                         dbRow.getOrDefault("ACYC_CNT", ""));
                
                try {
                    MainframeUtils.captureDbEvidence(chargeld);
                } catch (Exception e) {
                    logBoth("[WARN] Unable to capture mainframe evidence: " + e.getMessage());
                }
            } else {
                logBoth("[WARN] ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("[ERROR] Exception while fetching DB data: " + e.getMessage());
        }
    } else {
        logBoth("DB fetch skipped for this test case");
    }

    // ----- API Call -----
    String safeCharge = chargeld.isEmpty() ? "%20" : chargeld;
    String url = ConfigManager.get("se78.url") + safeCharge + "/chargedtl";
    logBoth("Step: Calling SE78 API with URL: " + url);

    int status;
    String body;
    List<Map<String, String>> apiData = new ArrayList<>();

    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headersObj).get().build()
    ).execute()) {

        status = resp.code();
        body = resp.body() == null ? "" : resp.body().string();
        apiData = JsonUtils.jsonToListOfMaps(body);
    }

    logBoth("HTTP Status: " + status);
    logBoth("Response Body (truncated): " + (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Status Validation -----
    if (!expStatusStr.isBlank()) {
        int expStatus = Integer.parseInt(expStatusStr);
        Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testId);
        logBoth("Expected HTTP status matched: " + expStatus);
    }

    // ----- Prepare Expected Fields -----
    Map<String, String> expectedFields = new HashMap<>();

    if (isDbRequired) {
        // Example: DB-driven validation fields
        if ("TC04_ClosedChargeID".equals(testId)) {
            expectedFields.put("errorResponse.errorInfo[0].code", "4310");
        } else {
            expectedFields.put("responseMessage.responseBody.FormStatus", dbFormStatus);
            expectedFields.put("responseMessage.responseBody.cyclicCount", dbCycCnt);
            expectedFields.put("responseMessage.responseBody.errorCode", "0");
        }
    } else if (isExcelValidationRequired) {
        JSONObject expJson = new JSONObject(expectedFieldsJson);
        for (String k : expJson.keySet()) {
            expectedFields.put(k, expJson.get(k).toString());
        }
    }

    // ----- Field-wise Validation -----
    boolean pass = true;
    String failReason = "";

    for (Map<String, String> record : apiData) {
        for (Map.Entry<String, String> entry : expectedFields.entrySet()) {
            String key = entry.getKey();
            String expectedVal = entry.getValue();
            String actualVal = record.getOrDefault(key, "");

            if (!expectedVal.equals(actualVal)) {
                pass = false;
                failReason = "Mismatch for field: " + key +
                        " | Expected: " + expectedVal +
                        " | Actual: " + actualVal;
                logBoth(failReason);
            } else {
                logBoth("Field validation passed -> " + key + " | Value: " + actualVal);
            }
        }
    }

    if (!pass) {
        Assert.fail("Field validation failed: " + failReason);
    } else {
        logBoth("All expected fields validated successfully.");
    }

    long endTime = System.currentTimeMillis();
    logBoth("Test case " + testId + " executed in " + (endTime - startTime) + " ms");
}
