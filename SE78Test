@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {
    String testId   = row.getOrDefault("TestCaseID", "").trim();
    String chargeId = row.getOrDefault("ChargeID", "");   // allow blank!
    String headers  = row.getOrDefault("Headers", "").trim();
    String expCode  = row.getOrDefault("ErrorCode", "").trim();

    if (testId.isEmpty()) throw new IllegalArgumentException("TestCaseID missing in Excel row");

    System.out.println("=== SE78: " + testId + " (ChargeID=" + chargeId + ") ===");

    // fetch JWT
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder hb = new Headers.Builder();
    if (!headers.isBlank()) {
        JSONObject h = new JSONObject(headers);
        for (String k : h.keySet()) {
            String v = h.optString(k, "");
            if (v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            hb.add(k, v);
        }
    }
    hb.add("X-HSBC-E2E-Trust-Token", jwt);

    // build request (note: chargeId can be blank)
    String url = ConfigManager.get("se78.url") + "/v1/securities/" + chargeId + "/chargedtl";

    Request req = new Request.Builder()
            .url(url)
            .headers(hb.build())
            .get()
            .build();

    String body;
    int status;
    try (Response resp = client.newCall(req).execute()) {
        status = resp.code();
        body = resp.body() == null ? "" : resp.body().string();
    }

    System.out.println("HTTP " + status + " | Response: " +
            (body.length() > 400 ? body.substring(0, 400) + "..." : body));

    boolean pass = true;
    String failReason = "";

    // ----- field-wise checks -----
    try {
        Assert.assertEquals(status, 400, "Expected HTTP 400 for empty ChargeID");

        if (!expCode.isEmpty()) {
            JSONObject json = new JSONObject(body);
            // Navigate to error code inside nested JSON
            String actualCode = json
                .getJSONObject("gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse")
                .getJSONObject("errorResponse")
                .getJSONObject("errorResponseDetails")
                .getJSONArray("errorInfo")
                .getJSONObject(0)
                .getString("code");

            Assert.assertEquals(actualCode, expCode,
                    "Mismatch in expected error code");
        }
    } catch (AssertionError ae) {
        pass = false;
        failReason = ae.getMessage();
    }

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);
    Assert.assertTrue(pass, failReason);
}
