// Define which TestCaseIDs are Open Charge scenarios
private static final Set<String> OPEN_CHARGE_TESTS = Set.of(
    "SE78_TC_OPEN_01" // replace with actual TestCaseID(s)
);

@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {

    String testId       = row.getOrDefault("TestCaseID", "").trim();
    String chargeId     = row.getOrDefault("ChargeID", "").trim();
    String headers      = row.getOrDefault("Headers", "").trim();
    String expected     = row.getOrDefault("ExpectedOutput", "").trim();
    String expectedCode = row.getOrDefault("ErrorCode", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    boolean isOpenChargeTest = OPEN_CHARGE_TESTS.contains(testId);
    String dbFormStatus = "UNKNOWN", dbCycCnt = "UNKNOWN";

    // ----- DB fetch for OpenChargeID test only -----
    if (isOpenChargeTest && !chargeId.isEmpty()) {
        try {
            Set<String> chargeData = DbFetchHelper.fetchOpenChargeData(chargeId);
            if (!chargeData.isEmpty()) {
                String[] parts = chargeData.iterator().next().split("\\|");
                dbFormStatus = parts.length > 2 ? parts[2] : "UNKNOWN";
                dbCycCnt     = parts.length > 3 ? parts[3] : "UNKNOWN";
                String openStatus = parts.length > 1 ? parts[1] : "UNKNOWN";

                logBoth("DB Status: CHG_ID found with OPEN_CLO_STA='" + openStatus +
                        "', FormStatus='" + dbFormStatus + "', CYC_CNT='" + dbCycCnt + "'");
            } else {
                logBoth("DB Status: ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("DB Status: Error while fetching charge info - " + e.getMessage());
        }
    }

    // ----- Headers & API call (reuse existing logic) -----
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;

    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v != null && v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v == null ? "" : v);
        }
    }
    if (!trustTokenPresent) headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);

    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("HTTP " + status + " | Response (truncated): " +
            (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    boolean pass = true;
    String failReason = "";

    // ----- OpenChargeID validation -----
    if (isOpenChargeTest) {
        // Status should be 200
        if (status != 200) {
            pass = false;
            failReason += "Expected HTTP 200 but got " + status;
        } else {
            logBoth("HTTP status validation passed: 200");
        }

        // Return code should be "0"
        String actualCode = extractNestedErrorCode(responseJson);
        if (!"0".equals(actualCode)) {
            pass = false;
            failReason += " | Expected return code 0 but got " + actualCode;
        } else {
            logBoth("Return code validation passed: " + actualCode);
        }

        // Field-wise comparison: FormStatus & CYC_CNT
        JSONObject svcResp = responseJson.optJSONObject("gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse");
        if (svcResp != null) {
            JSONObject details = svcResp.optJSONObject("details");
            if (details != null) {
                String apiFormStatus = details.optString("formStatus");
                String apiCycCnt     = details.optString("cycCnt");

                logBoth("Validating fields from DB vs API");
                if (!dbFormStatus.equals(apiFormStatus)) {
                    pass = false;
                    failReason += " | FormStatus mismatch: DB='" + dbFormStatus + "', API='" + apiFormStatus + "'";
                } else logBoth("FormStatus matched: " + dbFormStatus);

                if (!dbCycCnt.equals(apiCycCnt)) {
                    pass = false;
                    failReason += " | CYC_CNT mismatch: DB='" + dbCycCnt + "', API='" + apiCycCnt + "'";
                } else logBoth("CYC_CNT matched: " + dbCycCnt);
            }
        }

    } else {
        // Existing validation for other test cases
        if (!expStatusStr.isBlank()) {
            int expStatus = Integer.parseInt(expStatusStr);
            Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testId);
            logBoth("Expected HTTP status matched: " + expStatus);
        }

        if (expected.isBlank()) {
            if (!expectedCode.isBlank()) {
                String actual = extractNestedErrorCode(responseJson);
                if (!expectedCode.equals(actual)) {
                    pass = false;
                    failReason = "Expected error code " + expectedCode + " but got " + actual;
                }
            }
        } else {
            try {
                JSONObject expJson = new JSONObject(expected);
                pass = jsonContains(expJson, responseJson);
                if (!pass) failReason = "Response JSON does not contain ExpectedOutput";
            } catch (Exception ex) {
                pass = false;
                failReason = "Validation error: " + ex.getMessage();
            }
        }
    }

    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);
    Assert.assertTrue(pass, "SE78 test failed for " + testId + " : " + failReason);
}
