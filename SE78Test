package tests;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import utils.ExcelUtils;
import utils.ConfigManager;

import java.util.Iterator;
import java.util.Map;

public class SE78Test {

    @DataProvider(name = "se78Data")
    public Iterator<Object[]> getData() throws Exception {
        // Sheet name is SE78, file is under src/test/resources/testdata.xlsx
        return ExcelUtils.getDataProvider("testdata.xlsx", "SE78");
    }

    @Test(dataProvider = "se78Data")
    public void callSecurityChargeApi(Map<String, String> row) {

        String testId       = row.getOrDefault("TestCaseID", "").trim();
        String chargeId     = row.getOrDefault("ChargeID", "").trim();
        String expectedCode = row.getOrDefault("ErrorCode", "").trim();
        String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

        // URL comes from config.properties (under test/resources)
        String baseUrl = ConfigManager.getProperty("se78.base.url");
        String endpoint = chargeId.isEmpty()
                ? baseUrl + "/gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1" // no charge id
                : baseUrl + "/gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1/" + chargeId;

        System.out.println("SE78: " + testId + " (ChargeID=" + chargeId + ") ===");

        // ----- call API -----
        Response resp = RestAssured
                .given()
                .headers(ExcelUtils.parseJsonHeaders(row.getOrDefault("Headers", "{}")))
                .when()
                .get(endpoint)
                .then()
                .extract()
                .response();

        int status = resp.statusCode();
        System.out.println("HTTP " + status + " | Response: " + resp.asString());

        // ----- status check -----
        if (!expStatusStr.isEmpty()) {
            int expectedStatus = Integer.parseInt(expStatusStr);
            Assert.assertEquals(status, expectedStatus,
                    "Unexpected HTTP status for " + testId);
        }

        // ----- optional errorCode check -----
        if (!expectedCode.isEmpty()) {
            boolean match = resp.asString().contains("\"code\":\"" + expectedCode + "\"")
                         || resp.asString().contains("\"errorCode\":" + expectedCode);
            Assert.assertTrue(match,
                    "Expected error code " + expectedCode + " in response for " + testId);
        }

        // write PASS/FAIL back to Excel
        ExcelUtils.writeResult("testdata.xlsx", "SE78", testId,
                (status == (expStatusStr.isEmpty() ? status : Integer.parseInt(expStatusStr))) &&
                (expectedCode.isEmpty() || resp.asString().contains(expectedCode))
                        ? "PASS" : "FAIL");
    }
}
