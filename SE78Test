package tests;

import okhttp3.*;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import utils.ExcelUtils;      // make sure this can read/write Excel rows
import utils.JwtFetcher;     // your existing JWT helper

import java.util.Iterator;
import java.util.Map;

public class SE78Test {

    private final OkHttpClient client = new OkHttpClient();

    /**
     * Reads rows from TestData.xlsx / SE78 sheet.
     * Each row must have columns:
     *   TestCaseID | ChargeID | Headers | ExpectedOutput | Result
     */
    @DataProvider(name = "se78Data")
    public Object[][] se78Data() throws Exception {
        // ExcelUtils.readSheet should return Object[][] where each element is a Map<String,String>
        return ExcelUtils.readSheet("TestData.xlsx", "SE78");
    }

    @Test(dataProvider = "se78Data")
    public void callSecurityChargeApi(Map<String,String> row) throws Exception {

        String testId   = row.get("TestCaseID");
        String chargeId = row.get("ChargeID");
        String expected = row.get("ExpectedOutput");   // full JSON string for quick match
        String headers  = row.get("Headers");          // JSON object as text

        System.out.println("Running test: " + testId + " for ChargeID: " + chargeId);

        // Parse Excel headers JSON
        JSONObject headerObj = new JSONObject(headers);

        // Build request
        Request.Builder builder = new Request.Builder()
                .url("https://digitaldev-int-rbwm.systems.uk.hsbc/cb-rps-05/"
                        + "gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy/v1/securities/"
                        + chargeId + "/chargedtl")
                .get();

        // Add headers from Excel
        Iterator<String> keys = headerObj.keys();
        while (keys.hasNext()) {
            String key = keys.next();
            builder.addHeader(key, headerObj.getString(key));
        }

        // Add JWT from fetcher
        String jwt = JwtFetcher.fetchIb2bJwt();
        builder.addHeader("X-HSBC-E2E-Trust-Token", jwt);

        Request request = builder.build();

        String responseBody;
        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new RuntimeException("HTTP call failed: " + response.code());
            }
            responseBody = response.body().string();
        }

        System.out.println("API Response: " + responseBody);

        // Simple validation â€“ just check expected snippet exists
        boolean pass = responseBody.contains("FormStatus")
                       && responseBody.contains("\"SGN\"");

        // Optional stricter check:
        if (expected != null && !expected.isBlank()) {
            pass = pass && responseBody.contains(expected.trim());
        }

        // Write result back to Excel
        ExcelUtils.writeResult("TestData.xlsx", "SE78", testId, pass ? "PASS" : "FAIL");

        // Hard assert so the test shows failure in TestNG report
        Assert.assertTrue(pass, "Response did not match expected output for " + testId);
    }
}
