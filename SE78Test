// Define which TestCaseIDs require DB check and scenario type
private static final Map<String, String> DB_REQUIRED_TESTS = Map.of(
    "TC04_ClosedChargeID", "CLOSED",
    "SE78_TC_OPEN_01", "OPEN"
);

@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {

    String testId       = row.getOrDefault("TestCaseID", "").trim();
    String chargeId     = row.getOrDefault("ChargeID", "").trim();
    String headers      = row.getOrDefault("Headers", "").trim();
    String expected     = row.getOrDefault("ExpectedOutput", "").trim();
    String expectedCode = row.getOrDefault("ErrorCode", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    // ----- DB Check (only if required) -----
    String scenario = DB_REQUIRED_TESTS.get(testId);
    String openStatus = "UNKNOWN";
    String formStatus = "UNKNOWN";
    String acycCnt    = "UNKNOWN";

    if (scenario != null && !chargeId.isEmpty()) {
        try {
            Set<String> chargeData;
            if ("OPEN".equals(scenario)) {
                chargeData = DbFetchHelper.fetchOpenChargeData(chargeId);
            } else { // CLOSED
                chargeData = DbFetchHelper.fetchChargeStatus(chargeId);
            }

            if (!chargeData.isEmpty()) {
                String[] parts = chargeData.iterator().next().split("\\|");
                openStatus = parts.length > 1 ? parts[1] : "UNKNOWN";
                if ("OPEN".equals(scenario) && parts.length > 2) formStatus = parts[2];
                if ("OPEN".equals(scenario) && parts.length > 3) acycCnt = parts[3];

                logBoth("DB Status: ChargeID found with OPEN_CLO_STA='" + openStatus +
                        (scenario.equals("OPEN") ? "', CHG_FORM_STA='" + formStatus + "', ACYC_CNT='" + acycCnt + "'" : ""));
            } else {
                logBoth("DB Status: ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("DB Status: Error while fetching charge info - " + e.getMessage());
        }
    } else {
        logBoth("DB Status: No DB check required for this test case or ChargeID is empty");
    }

    // ----- Headers & API Call -----
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;

    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v != null && v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v == null ? "" : v);
        }
    }
    if (!trustTokenPresent) headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);

    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("HTTP " + status + " | Response (truncated): " +
            (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Status & Return Code Validation -----
    boolean pass = true;
    String failReason = "";

    int expectedStatus = expStatusStr.isBlank() ?
            ("OPEN".equals(scenario) ? 200 : 400) : Integer.parseInt(expStatusStr);

    if (status != expectedStatus) {
        pass = false;
        failReason += "Expected HTTP " + expectedStatus + " but got " + status;
    } else {
        logBoth("HTTP status validation passed: " + status);
    }

    String expectedReturnCode = "OPEN".equals(scenario) ? "0000" : "4310";
    String actualReturnCode = extractNestedErrorCode(responseJson);

    if (!expectedReturnCode.equals(actualReturnCode)) {
        pass = false;
        failReason += " | Expected return code " + expectedReturnCode + " but got " + actualReturnCode;
    } else {
        logBoth("Return code validation passed: " + actualReturnCode);
    }

    // ----- Field-wise validation for Open scenario -----
    if ("OPEN".equals(scenario)) {
        logBoth("Validating fields for Open ChargeID:");
        logBoth("FormStatus: " + formStatus);
        logBoth("ACYC_CNT: " + acycCnt);

        JSONObject svcResp = responseJson.optJSONObject("gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse");
        if (svcResp != null) {
            JSONObject details = svcResp.optJSONObject("details");
            if (details != null) {
                logBoth("API Field validation - FormStatus: " + details.optString("formStatus"));
                logBoth("API Field validation - CyclicCount: " + details.optString("acycCnt"));
            }
        }
    }

    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);
    Assert.assertTrue(pass, "SE78 test failed for " + testId + " : " + failReason);
}
