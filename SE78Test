@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {
    String testId   = row.getOrDefault("TestCaseID", "").trim();
    String chargeId = row.getOrDefault("ChargeID", "").trim();
    String headers  = row.getOrDefault("Headers", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    String dbOpenStatus = "UNKNOWN", dbFormStatus = "", dbCycCnt = "";
    boolean isDbRequired = DB_REQUIRED_TESTS.contains(testId);

    // ----- DB fetch -----
    if (isDbRequired && !chargeId.isEmpty()) {
        logBoth("Step: Fetching DB data for ChargeID '" + chargeId + "'");
        try {
            Set<String> chargeData = DbFetchHelper.fetchChargeData(chargeId);
            if (!chargeData.isEmpty()) {
                String[] parts = chargeData.iterator().next().split("\\|");
                dbOpenStatus = parts.length > 1 ? parts[1] : "UNKNOWN";
                dbFormStatus = parts.length > 2 ? parts[2] : "";
                dbCycCnt     = parts.length > 3 ? parts[3] : "";
                logBoth("DB Result: OPEN_CLO_STA='" + dbOpenStatus + 
                        "', FormStatus='" + dbFormStatus + "', CYC_CNT='" + dbCycCnt + "'");
            } else {
                logBoth("[WARN] ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("[ERROR] Exception while fetching DB data: " + e.getMessage());
        }
    } else {
        logBoth("DB fetch skipped for this test case");
    }

    // ----- Build headers -----
    logBoth("Step: Preparing HTTP headers for API call");
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;
    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v != null && v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v == null ? "" : v);
            logBoth("Header added: " + k + "=" + v);
        }
    }
    if (!trustTokenPresent) {
        headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);
        logBoth("Header added: X-HSBC-E2E-Trust-Token=" + jwt);
    }

    // ----- API Call -----
    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";
    logBoth("Step: Calling SE78 API with URL: " + url);

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("Step: Received API response");
    logBoth("HTTP Status: " + status);
    logBoth("Response Body (truncated): " + (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Validation -----
    boolean pass = true;
    String failReason = "";

    if (isDbRequired) {
        logBoth("Step: Performing field-wise validation for DB-required test case");

        // ClosedChargeID scenario
        if ("TC04_ClosedChargeID".equals(testId)) {
            logBoth("Validating ClosedChargeID scenario");
            if (status != 400) { pass = false; failReason += "Expected HTTP 400 but got " + status; }
            String actualCode = extractNestedErrorCode(responseJson);
            logBoth("Comparing return code: Expected=4310, Actual=" + actualCode);
            if (!"4310".equals(actualCode)) { pass = false; failReason += " | Return code mismatch"; }
        } 
        // OpenChargeID scenario
        else {
            logBoth("Validating OpenChargeID scenario");
            if (status != 200) { pass = false; failReason += "Expected HTTP 200 but got " + status; }

            // Extract nested responseBody
            JSONObject svcResp = responseJson.optJSONObject(
                    "gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse");
            JSONObject responseMessage = svcResp != null ? svcResp.optJSONObject("responseMessage") : null;
            JSONObject responseBody = responseMessage != null ? responseMessage.optJSONObject("responseBody") : null;

            String apiFormStatus = responseBody != null ? responseBody.optString("FormStatus", "") : "";
            String apiCycCnt     = responseBody != null ? String.valueOf(responseBody.optInt("cyclicCount", -1)) : "";
            String apiErrorCode  = responseBody != null ? String.valueOf(responseBody.optInt("errorCode", -1)) : "";

            logBoth("Comparing fields DB vs API:");
            logBoth("FormStatus -> DB: " + dbFormStatus + ", API: " + apiFormStatus);
            logBoth("CYC_CNT    -> DB: " + dbCycCnt + ", API: " + apiCycCnt);
            logBoth("errorCode  -> Expected: 0, API: " + apiErrorCode);

            if (!dbFormStatus.equals(apiFormStatus)) { pass = false; failReason += " | FormStatus mismatch"; }
            if (!dbCycCnt.equals(apiCycCnt)) { pass = false; failReason += " | CYC_CNT mismatch"; }
            if (!"0".equals(apiErrorCode)) { pass = false; failReason += " | errorCode mismatch"; }
        }
    } else {
        logBoth("Step: Performing standard Excel-based validation for this test case");
        // Existing logic for non-DB test cases
    }

    // ----- Result Logging -----
    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);

    logBoth("=== End of Test: " + testId + " ===\n");
    Assert.assertTrue(pass, "SE78 test failed for " + testId + " : " + failReason);
}
