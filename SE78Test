package tests;

import org.framework.utils.ConfigManager;
import org.framework.utils.ExcelUtils;
import org.framework.utils.JwtFetcher;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import okhttp3.*;   // OkHttp client

import java.util.*;
import java.util.concurrent.TimeUnit;

public class SE78Test {

    private static final String EXCEL_PATH =
        "src/test/resources/testdata.xlsx";
    private static final String SHEET_NAME = "SE78";
    private static final String BASE_URL =
        ConfigManager.get("se78.base.url"); // read from config.properties

    @DataProvider(name = "se78Data")
    public Object[][] se78Data() throws Exception {
        List<Map<String,String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] data = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) data[i][0] = rows.get(i);
        return data;
    }

    @Test(dataProvider = "se78Data")
    public void verifyChargeIdScenarios(Map<String,String> row) throws Exception {

        // ---- 1. Build request JSON using ChargeId column
        String chargeId = row.getOrDefault("ChargeId", "");
        JSONObject body = new JSONObject();
        body.put("chargeId", chargeId);   // <—— key point

        // ---- 2. Headers (optional JSON in sheet)
        Map<String,String> headers = new HashMap<>();
        String headersJson = row.getOrDefault("Headers", "");
        if (!headersJson.isEmpty()) {
            headers = ExcelUtils.jsonToMap(headersJson);
        }

        // ---- 3. Execute request
        Request.Builder builder = new Request.Builder()
                .url(BASE_URL + "/se78")
                .post(RequestBody.create(
                        body.toString(), MediaType.parse("application/json")));

        headers.forEach(builder::addHeader);
        Response resp = new OkHttpClient().newCall(builder.build()).execute();

        // ---- 4. Assertions
        int expectedHttp = Integer.parseInt(row.getOrDefault("ExpectedHttpCode","200"));
        Assert.assertEquals(resp.code(), expectedHttp, "HTTP code mismatch");

        JSONObject jsonResp = new JSONObject(resp.body().string());
        String expectedErr = row.getOrDefault("ExpectedErrorCode","");
        if (!expectedErr.isEmpty()) {
            Assert.assertEquals(jsonResp.optString("returnCode"), expectedErr);
        }

        // ---- 5. Optional field checks
        String fields = row.getOrDefault("ExpectedFields","");
        for (String f : fields.split(",")) {
            if (!f.isBlank()) Assert.assertTrue(jsonResp.has(f.trim()));
        }

        // ---- 6. Write pass/fail back to Excel
        ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME,
                row.get("TestCaseID"), "PASS");
    }
}
