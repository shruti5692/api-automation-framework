@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {
    String testId       = row.getOrDefault("TestCaseID", "").trim();
    String chargeId     = row.getOrDefault("ChargeID", "").trim();
    String headers      = row.getOrDefault("Headers", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();
    String expectedFieldsJson = row.getOrDefault("ExpectedFields", "").trim(); // Optional JSON from Excel

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    // ----- DB Fetch (if required) -----
    String dbOpenStatus = "UNKNOWN", dbFormStatus = "", dbCycCnt = "";
    boolean isDbRequired = DB_REQUIRED_TESTS.contains(testId);

    if (isDbRequired && !chargeId.isEmpty()) {
        logBoth("Step: Fetching DB data for ChargeID '" + chargeId + "'");
        try {
            // fetch only necessary fields: CHG_ID|OPEN_CLO_STA|CHG_FORM_STA|CYC_CNT
            Set<String> chargeData = DbFetchHelper.fetchChargeData(chargeId);
            if (!chargeData.isEmpty()) {
                String[] parts = chargeData.iterator().next().split("\\|");
                dbOpenStatus = parts.length > 1 ? parts[1] : "UNKNOWN";
                dbFormStatus = parts.length > 2 ? parts[2] : "";
                dbCycCnt     = parts.length > 3 ? parts[3] : "";
                logBoth("DB Result: OPEN_CLO_STA='" + dbOpenStatus +
                        "', FormStatus='" + dbFormStatus + "', CYC_CNT='" + dbCycCnt + "'");
            } else {
                logBoth("[WARN] ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("[ERROR] Exception while fetching DB data: " + e.getMessage());
        }
    } else {
        logBoth("DB fetch skipped for this test case");
    }

    // ----- Prepare Headers & JWT -----
    logBoth("Step: Preparing HTTP headers for API call");
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;
    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v);
            logBoth("Header added: " + k + "=" + v);
        }
    }
    if (!trustTokenPresent) {
        headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);
        logBoth("Header added: X-HSBC-E2E-Trust-Token=" + jwt);
    }

    // ----- API Call -----
    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";
    logBoth("Step: Calling SE78 API with URL: " + url);

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("HTTP Status: " + status);
    logBoth("Response Body (truncated): " + (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Status Validation -----
    if (!expStatusStr.isBlank()) {
        int expStatus = Integer.parseInt(expStatusStr);
        Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testId);
        logBoth("Expected HTTP status matched: " + expStatus);
    }

    // ----- Field-wise Validation -----
    boolean pass = true;
    String failReason = "";

    if (isDbRequired) {
        logBoth("Step: Performing DB field-wise validation");
        if ("TC04_ClosedChargeID".equals(testId)) {
            // Closed ChargeID: check nested error code
            String actualCode = getNestedValue(responseJson,
                    "gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse.errorResponse.errorResponseDetails.errorInfo[0].code");
            logBoth("Validating return code -> Expected: 4310 | Actual: " + actualCode);
            if (!"4310".equals(actualCode)) { pass = false; failReason += "Return code mismatch"; }
        } else {
            // Open ChargeID: validate FormStatus, cyclicCount, errorCode=0
            Map<String, String> dbFields = Map.of(
                "gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse.responseMessage.responseBody.FormStatus", dbFormStatus,
                "gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse.responseMessage.responseBody.cyclicCount", dbCycCnt,
                "gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse.responseMessage.responseBody.errorCode", "0"
            );
            boolean dbPass = validateFields(dbFields, responseJson);
            if (!dbPass) pass = false;
        }
    } else if (!expectedFieldsJson.isBlank()) {
        logBoth("Step: Performing Excel field-wise validation");
        JSONObject expFieldsJson = new JSONObject(expectedFieldsJson);
        Map<String, String> excelFields = new HashMap<>();
        for (String k : expFieldsJson.keySet()) excelFields.put(k, expFieldsJson.get(k).toString());
        boolean excelPass = validateFields(excelFields, responseJson);
        if (!excelPass) pass = false;
    }

    // ----- Test Result -----
    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);

    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);

    logBoth("=== End of Test: " + testId + " ===\n");
}
