package tests;

import com.framework.utils.ExcelUtils;
import com.framework.utils.JwtFetcher;
import okhttp3.*;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.File;
import java.util.List;
import java.util.Map;

public class SE78Test {

    // Adjust these to your project structure
    private static final String EXCEL_PATH = "src/test/resources/TestData.xlsx";
    private static final String SHEET_NAME = "SE78";

    @DataProvider(name = "excelData")
    public Object[][] excelData() throws Exception {
        List<Map<String, String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] data = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) {
            data[i][0] = rows.get(i);
        }
        return data;
    }

    @Test(dataProvider = "excelData")
    public void callSecurityChargeApi(Map<String, String> row) throws Exception {
        String testCaseId = row.get("TestCaseID");
        String chargeId   = row.get("ChargeID");
        String headersStr = row.get("Headers");
        String expected   = row.get("ExpectedOutput");

        OkHttpClient client = new OkHttpClient();

        // ---------- Build Headers ----------
        Headers.Builder headerBuilder = new Headers.Builder();
        // parse headers JSON from excel column "Headers"
        if (headersStr != null && !headersStr.trim().isEmpty()) {
            JSONObject headersJson = new JSONObject(headersStr);
            for (String key : headersJson.keySet()) {
                String value = headersJson.optString(key, "");
                if (key == null || key.trim().isEmpty()) {
                    throw new IllegalArgumentException("Header name is empty in TestCase " + testCaseId);
                }
                headerBuilder.add(key.trim(), value);
            }
        }

        // add JWT from the new translator method
        String jwt = JwtFetcher.fetchI2B2Jwt();
        System.out.println("JwtFetcher fetched iB2B JWT: " + jwt);
        headerBuilder.add("Authorization", "Bearer " + jwt);

        // ---------- Build Request ----------
        HttpUrl url = new HttpUrl.Builder()
                .scheme("https")
                .host("cmb-ib2b-dsp-pprod-eu.systems.uk.hsbc")
                .port(8443)
                .addPathSegments("dsp/security/charges/" + chargeId.trim())
                .build();

        Request request = new Request.Builder()
                .url(url)
                .headers(headerBuilder.build())
                .get()
                .build();

        String result;
        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                result = "Fail : HTTP " + response.code();
                ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testCaseId, result);
                Assert.fail(result);
            }

            String responseBody = response.body() != null ? response.body().string() : "";
            System.out.println("API Response: " + responseBody);

            JSONObject actualJson   = new JSONObject(responseBody);
            JSONObject expectedJson = new JSONObject(expected);

            // Simple equality check (you can make it partial if needed)
            if (jsonEquals(expectedJson, actualJson)) {
                result = "Pass";
                ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testCaseId, result);
            } else {
                result = "Fail : JSON mismatch";
                ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testCaseId, result);
                Assert.fail(result);
            }
        } catch (Exception ex) {
            result = "Fail : " + ex.getMessage();
            ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testCaseId, result);
            throw ex;
        }
    }

    /**
     * Basic deep comparison of two JSONObjects.
     */
    private boolean jsonEquals(JSONObject expected, JSONObject actual) {
        if (!expected.keySet().equals(actual.keySet())) return false;
        for (String key : expected.keySet()) {
            Object eVal = expected.get(key);
            Object aVal = actual.get(key);
            if (eVal instanceof JSONObject && aVal instanceof JSONObject) {
                if (!jsonEquals((JSONObject) eVal, (JSONObject) aVal)) return false;
            } else if (!eVal.equals(aVal)) {
                return false;
            }
        }
        return true;
    }
}
