package tests;

import org.framework.utils.ConfigManager;
import org.framework.utils.ExcelUtils;
import org.framework.utils.JwtFetcher;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import okhttp3.*;   // OkHttp client

import java.util.*;
import java.util.concurrent.TimeUnit;

public class SE78Test {

    private static final String EXCEL_PATH =
            System.getProperty("user.dir") + "/src/test/resources/TestData.xlsx";
    private static final String SHEET = "SE78";

    private final OkHttpClient client = new OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .build();

    @DataProvider(name = "se78Data")
    public Object[][] se78Data() throws Exception {
        List<Map<String,String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET);
        Object[][] data = new Object[rows.size()][1];
        for (int i=0;i<rows.size();i++) data[i][0] = rows.get(i);
        return data;
    }

    @Test(dataProvider = "se78Data")
    public void verifySE78Scenarios(Map<String,String> row) throws Exception {

        String testId   = row.get("TestCaseID");
        String chargeId = row.get("ChargeID"); // may be blank
        String expStatus= row.get("ExpectedStatus");
        String expCode  = row.get("ExpectedReturnCode");
        String expForm  = row.get("ExpectedFormStatus");

        // Build URL from config, replacing {chargeId}
        String baseUrl  = ConfigManager.get("se78.url");
        String finalUrl = baseUrl.replace("{chargeId}",
                              (chargeId==null || chargeId.isEmpty()) ? "" : chargeId);

        // Base headers from Excel JSON (optional)
        Map<String,String> headers = ExcelUtils.jsonToMap(row.get("Headers"));
        headers.put("Content-Type","application/json");
        headers.put("Authorization","Bearer " + JwtFetcher.fetchJwt());

        Request.Builder reqBuilder = new Request.Builder().url(finalUrl);
        headers.forEach(reqBuilder::addHeader);

        Request request = reqBuilder.get().build();

        try (Response response = client.newCall(request).execute()) {
            int actualStatus = response.code();
            Assert.assertEquals(actualStatus,
                    Integer.parseInt(expStatus),
                    "HTTP status mismatch for "+testId);

            String body = response.body() != null ? response.body().string() : "";
            if (!expCode.isEmpty()) {
                Assert.assertTrue(body.contains("\"returnCode\":\""+expCode+"\""),
                        "Expected returnCode "+expCode+" in response for "+testId);
            }
            if (expForm != null && !expForm.isEmpty()) {
                Assert.assertTrue(body.contains("\"formStatus\":\""+expForm+"\""),
                        "Expected formStatus "+expForm+" in response for "+testId);
            }
            ExcelUtils.writeResult(EXCEL_PATH, SHEET, testId, "PASS");
        } catch (AssertionError ae) {
            ExcelUtils.writeResult(EXCEL_PATH, SHEET, testId, "FAIL");
            throw ae;
        }
    }
}
