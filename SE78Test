// Only one set for DB-required test cases (Closed + Open)
private static final Set<String> DB_REQUIRED_TESTS = Set.of(
    "TC04_ClosedChargeID",
    "SE78_TC_OPEN_01" // replace with your actual OpenChargeID test
);

@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {
    String testId   = row.getOrDefault("TestCaseID", "").trim();
    String chargeId = row.getOrDefault("ChargeID", "").trim();
    String headers  = row.getOrDefault("Headers", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();

    logBoth("=== Running SE78 test: " + testId + " (ChargeID='" + chargeId + "') ===");

    String dbOpenStatus = "UNKNOWN", dbFormStatus = "", dbCycCnt = "";
    boolean isDbRequired = DB_REQUIRED_TESTS.contains(testId);

    if (isDbRequired && !chargeId.isEmpty()) {
        try {
            Set<String> chargeData = DbFetchHelper.fetchChargeData(chargeId);
            if (!chargeData.isEmpty()) {
                String[] parts = chargeData.iterator().next().split("\\|");
                dbOpenStatus = parts.length > 1 ? parts[1] : "UNKNOWN";
                dbFormStatus = parts.length > 2 ? parts[2] : "";
                dbCycCnt     = parts.length > 3 ? parts[3] : "";
                logBoth("DB Status: CHG_ID found with OPEN_CLO_STA='" + dbOpenStatus +
                        "', FormStatus='" + dbFormStatus + "', CYC_CNT='" + dbCycCnt + "'");
            } else {
                logBoth("DB Status: ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("DB Status: Error while fetching charge info - " + e.getMessage());
        }
    }

    // ----- Headers & API call (existing logic) -----
    String jwt = JwtFetcher.fetchIb2bJwt();
    Headers.Builder headerBuilder = new Headers.Builder();
    boolean trustTokenPresent = false;
    if (!headers.isBlank()) {
        JSONObject headerObj = new JSONObject(headers);
        for (Iterator<String> it = headerObj.keys(); it.hasNext();) {
            String k = it.next();
            String v = headerObj.optString(k, "");
            if (v != null && v.contains("{TRUST_TOKEN}")) v = v.replace("{TRUST_TOKEN}", jwt);
            if (k.equalsIgnoreCase("X-HSBC-E2E-Trust-Token") || k.equalsIgnoreCase("X-HSBC-TRUST-TOKEN"))
                trustTokenPresent = true;
            headerBuilder.add(k, v == null ? "" : v);
        }
    }
    if (!trustTokenPresent) headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);

    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = "https://digitaldev-int-rbwm.systems.uk.hsbc"
               + "/cb-rps-05/gb-hbeu-rps-mtg-prod-sec-chrg-enq-sct-internal-proxy"
               + "/v1/securities/" + safeCharge + "/chargedtl";

    int status;
    String body;
    JSONObject responseJson;
    try (Response resp = client.newCall(
            new Request.Builder().url(url).headers(headerBuilder.build()).get().build()
    ).execute()) {
        status = resp.code();
        body   = resp.body() == null ? "" : resp.body().string();
        responseJson = body.isEmpty() ? new JSONObject() : new JSONObject(body);
    }

    logBoth("HTTP " + status + " | Response (truncated): " +
            (body.length() > 500 ? body.substring(0, 500) + "..." : body));

    // ----- Validation -----
    boolean pass = true;
    String failReason = "";

    if (isDbRequired) {
        // ClosedChargeID
        if ("TC04_ClosedChargeID".equals(testId)) {
            if (status != 400) { pass = false; failReason += "Expected HTTP 400 but got " + status; }
            String actualCode = extractNestedErrorCode(responseJson);
            if (!"4310".equals(actualCode)) { pass = false; failReason += " | Expected code 4310 but got " + actualCode; }
        }
        // OpenChargeID
        else {
            if (status != 200) { pass = false; failReason += "Expected HTTP 200 but got " + status; }
            String actualCode = extractNestedErrorCode(responseJson);
            if (!"0".equals(actualCode)) { pass = false; failReason += " | Expected code 0 but got " + actualCode; }

            // Field-wise validation
            JSONObject svcResp = responseJson.optJSONObject("gb-hbeu-rps-mtg-prod-sec-chrg-enq-v1-svcOperationResponse");
            if (svcResp != null) {
                JSONObject details = svcResp.optJSONObject("details");
                if (details != null) {
                    String apiFormStatus = details.optString("formStatus");
                    String apiCycCnt     = details.optString("cycCnt");
                    if (!dbFormStatus.equals(apiFormStatus)) { pass = false; failReason += " | FormStatus mismatch"; }
                    if (!dbCycCnt.equals(apiCycCnt)) { pass = false; failReason += " | CYC_CNT mismatch"; }
                }
            }
        }
    }
    else {
        // Existing validation for other test cases (from Excel)
    }

    if (pass) logPass("Test passed for " + testId);
    else logFail(failReason);
    ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason);
    Assert.assertTrue(pass, "SE78 test failed for " + testId + " : " + failReason);
}
