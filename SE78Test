@Test(dataProvider = "se78Data")
public void callSecurityChargeApi(Map<String, String> row) throws Exception {

    long startTime = System.currentTimeMillis();

    String testId = row.getOrDefault("TestCaseID", "").trim();
    String chargeId = row.getOrDefault("ChargeID", "").trim();
    String expStatusStr = row.getOrDefault("ExpectedStatus", "").trim();
    String expectedFieldsJson = row.getOrDefault("ExpectedFields", "").trim();

    logBoth("Running SE78 test: " + testId + " (ChargeID=" + chargeId + ")");

    // ------------------- DB Fetch -------------------
    List<Map<String, String>> dbData = new ArrayList<>();
    String dbFormStatus = "", dbCycCnt = "", dbOpenStatus = "UNKNOWN";
    boolean isDbRequired = DB_REQUIRED_TESTS.contains(testId);

    if (isDbRequired && !chargeId.isEmpty()) {
        logBoth("Step: Fetching DB data for ChargeID " + chargeId);
        try {
            dbData = DbFetchHelper.fetchData(chargeQuery, chargeId);
            if (!dbData.isEmpty()) {
                Map<String, String> chargeRow = dbData.get(0);
                dbOpenStatus = chargeRow.getOrDefault("OPEN_CLO_STA", "UNKNOWN");
                dbFormStatus = chargeRow.getOrDefault("CHG_FORM_STA", "");
                dbCycCnt = chargeRow.getOrDefault("CYC_CNT", "");
            } else {
                logBoth("[WARN] ChargeID not found in DB");
            }
        } catch (Exception e) {
            logBoth("[ERROR] Exception while fetching DB data: " + e.getMessage());
        }
    } else {
        logBoth("DB fetch skipped for this test case");
    }

    // ------------------- Prepare Headers -------------------
    logBoth("Step: Preparing HTTP headers for API call");
    String jwt = JwtFetcher.fetchIb2bJwt();

    Headers.Builder headerBuilder = new Headers.Builder();
    headerBuilder.add("Content-Type", "application/json");
    headerBuilder.add("X-HSBC-E2E-Trust-Token", jwt);
    headerBuilder.add("X-HSBC-Sort-Code", "400788");
    headerBuilder.add("X-HSBC-Src-UserAgent", "Apache HttpClient/4.5.6 (Java/1.8.0_112)");
    // Add other static headers here

    Headers headersObj = headerBuilder.build();
    headersObj.names().forEach(name -> logBoth("Header added: " + name + " = " + headersObj.get(name)));

    // ------------------- API Call -------------------
    String safeCharge = chargeId.isEmpty() ? "%20" : chargeId;
    String url = ConfigManager.get("se78.url") + safeCharge + "/chargedtl";
    logBoth("Step: Calling SE78 API with URL: " + url);

    OkHttpClient client = new OkHttpClient();
    String apiBody;
    int status;

    try (Response resp = client.newCall(new Request.Builder().url(url).headers(headersObj).get().build()).execute()) {
        status = resp.code();
        apiBody = resp.body() != null ? resp.body().string() : "";
    }

    logBoth("HTTP Status: " + status);
    logBoth("Response Body (truncated): " + (apiBody.length() > 500 ? apiBody.substring(0, 500) + "..." : apiBody));

    // ------------------- Status Validation -------------------
    if (!expStatusStr.isBlank()) {
        int expectedStatus = Integer.parseInt(expStatusStr);
        Assert.assertEquals(status, expectedStatus);
        logBoth("Expected HTTP status matched: " + expectedStatus);
    }

    // ------------------- Convert API JSON to List<Map<String,String>> -------------------
    List<Map<String, String>> apiData = JsonUtils.jsonToListOfMaps(apiBody);

    // ------------------- Field-wise Validation -------------------
    boolean pass = true;
    String failReason = "";

    if (isDbRequired) {
        logBoth("Step: Performing DB field-wise validation");

        for (Map<String, String> apiRecord : apiData) {
            boolean recordMatched = dbData.stream().anyMatch(dbRecord ->
                Objects.equals(apiRecord.get("FormStatus"), dbRecord.get("CHG_FORM_STA")) &&
                Objects.equals(apiRecord.get("CyclicCount"), dbRecord.get("CYC_CNT"))
            );

            if (!recordMatched) {
                pass = false;
                failReason = "API record not found in DB: " + apiRecord;
                logBoth(failReason);
            }
        }

    } else if (!expectedFieldsJson.isBlank()) {
        logBoth("Step: Performing Excel field-wise validation");
        Map<String, String> excelFields = JsonUtils.jsonToFlatMap(expectedFieldsJson);

        for (Map<String, String> apiRecord : apiData) {
            for (String key : excelFields.keySet()) {
                if (!Objects.equals(apiRecord.get(key), excelFields.get(key))) {
                    pass = false;
                    failReason = "Excel field mismatch for key: " + key + " API=" + apiRecord.get(key) + ", Excel=" + excelFields.get(key);
                    logBoth(failReason);
                }
            }
        }
    }

    // ------------------- Log Evidence Section -------------------
    logDbAndEvidence(dbData, testId, test);

    // ------------------- Test Result & Duration -------------------
    long durationSec = (System.currentTimeMillis() - startTime) / 1000;
    if (pass) {
        logPass("Test passed for testId " + testId + " in " + durationSec + " sec");
    } else {
        logFail("Field validation failed for testId " + testId + " Reason: " + failReason);
    }

    ExcelUtils.writeResultWithDuration(EXCEL_PATH, SHEET_NAME, testId,
            pass ? "PASS" : "FAIL: " + failReason, durationSec);

    logBoth("== End of Test: " + testId + " (Duration: " + durationSec + " sec) ==");
}
