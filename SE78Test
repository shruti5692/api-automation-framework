package tests;

import org.framework.utils.ConfigManager;
import org.framework.utils.ExcelUtils;
import org.framework.utils.JwtFetcher;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.*;

/**
 * Automation for SE78 API mandatory & length validations.
 * Uses a single Excel sheet with a CaseType column (POS / NEG).
 */
public class SE78Test {

    private static final String EXCEL_PATH = System.getProperty("user.dir") + "/TestData.xlsx";
    private static final String SHEET_NAME = "SE78";

    // ---------------------- Data Providers ----------------------

    @DataProvider(name = "positiveCases")
    public Object[][] positiveCases() throws Exception {
        return loadCases("POS");
    }

    @DataProvider(name = "negativeCases")
    public Object[][] negativeCases() throws Exception {
        return loadCases("NEG");
    }

    private Object[][] loadCases(String type) throws Exception {
        List<Map<String,String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        List<Map<String,String>> filtered = new ArrayList<>();
        for (Map<String,String> r : rows) {
            if (type.equalsIgnoreCase(r.get("CaseType"))) {
                filtered.add(r);
            }
        }
        Object[][] data = new Object[filtered.size()][1];
        for (int i = 0; i < filtered.size(); i++) data[i][0] = filtered.get(i);
        return data;
    }

    // ---------------------- Tests ----------------------

    @Test(dataProvider = "positiveCases")
    public void testPositiveCases(Map<String,String> row) throws Exception {
        executeTest(row, true);
    }

    @Test(dataProvider = "negativeCases")
    public void testNegativeCases(Map<String,String> row) throws Exception {
        executeTest(row, false);
    }

    // ---------------------- Core Logic ----------------------

    private void executeTest(Map<String,String> row, boolean positive) throws Exception {
        String testId  = row.get("TestCaseID");
        String chargeId = row.get("ChargeID");
        String headersJson = row.get("Headers");
        int expectedStatus = Integer.parseInt(row.get("ExpectedStatus"));

        // 1. Build headers
        Map<String,String> headers = JsonHelper.toMap(headersJson);
        String jwt = JwtFetcher.fetchJwt(ConfigManager.get("staff.username"));
        System.out.println("JwtFetcher fetched JWT: " + jwt); // for reference
        headers.put("Authorization", "Bearer " + jwt);
        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");

        // 2. Build body (simple JSON payload with ChargeID)
        String requestBody = "{\"ChargeID\":\"" + (chargeId == null ? "" : chargeId) + "\"}";

        // 3. Call SE78 API
        String url = ConfigManager.get("api.base.url") + "/se78/charge";
        HttpResponse resp = SimpleHttp.post(url, headers, requestBody);

        // 4. Validation
        boolean pass;
        if (positive) {
            pass = resp.getStatusCode() == expectedStatus;
        } else {
            String expectedCode = row.get("ExpectedErrorCode");
            String expectedMsg  = row.get("ExpectedErrorMessage");
            pass = resp.getStatusCode() == expectedStatus &&
                   resp.getBody().contains(expectedCode) &&
                   resp.getBody().contains(expectedMsg);
        }

        // 5. Write result back to Excel & assert
        ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testId, pass ? "PASS" : "FAIL");
        Assert.assertTrue(pass,
            "Failure for " + testId + "\nStatus=" + resp.getStatusCode() +
            "\nBody=" + resp.getBody());
    }
}
