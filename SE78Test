package tests;

import com.framework.utils.ConfigManager;
import com.framework.utils.ExcelUtils;
import com.framework.utils.JwtFetcher;
import okhttp3.*;
import org.json.JSONObject;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.*;

/**
 * SE78 API test:
 *  - Validates mandatory and length checks for ChargeID.
 *  - Positive and negative test cases are read from Excel.
 */
public class SE78Test {

    private static final String EXCEL_PATH  = System.getProperty("user.dir") + "/SE78TestData.xlsx";
    private static final String SHEET_NAME  = "SE78_Cases";

    @DataProvider(name = "se78Data")
    public Object[][] se78Data() throws Exception {
        List<Map<String,String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET_NAME);
        Object[][] data = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) data[i][0] = rows.get(i);
        return data;
    }

    @Test(dataProvider = "se78Data")
    public void validateChargeIdRules(Map<String,String> row) throws Exception {

        String testCaseID  = row.get("TestCaseID");
        String chargeId    = row.get("ChargeID");
        String headersJson = row.get("Headers");
        int expectedStatus = Integer.parseInt(row.get("ExpectedStatusCode"));
        String expectedKey = row.get("ExpectedErrorKey");
        String expectedMsg = row.get("ExpectedErrorMsg");

        // --- Build headers ---
        Map<String,String> headers = JsonHelper.toMap(headersJson);
        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");
        String jwt = JwtFetcher.fetchI2BJwt();   // your new method for iB2B token
        headers.put("Authorization", "Bearer " + jwt);
        System.out.println("Fetched JWT: " + jwt);

        // --- Build request body ---
        JSONObject body = new JSONObject();
        body.put("ChargeID", chargeId == null ? "" : chargeId.trim());

        RequestBody reqBody = RequestBody.create(
                body.toString(), MediaType.parse("application/json"));

        String baseUrl = ConfigManager.get("api.se78.url"); // e.g. https://cmb-.../se78
        Request.Builder reqBuilder = new Request.Builder()
                .url(baseUrl)
                .post(reqBody);

        for (Map.Entry<String,String> e : headers.entrySet()) {
            if (e.getKey() != null && !e.getKey().trim().isEmpty())
                reqBuilder.addHeader(e.getKey(), e.getValue());
        }

        OkHttpClient client = new OkHttpClient();
        Response response = client.newCall(reqBuilder.build()).execute();

        int actualStatus = response.code();
        String respBody = response.body() != null ? response.body().string() : "";
        System.out.println("API Response: " + respBody);

        boolean pass;

        if (expectedStatus == 200) {
            // Positive scenario: just match status
            pass = (actualStatus == 200);
        } else {
            // Negative scenario: match status + error key/message if present
            pass = (actualStatus == expectedStatus);
            if (pass && !expectedKey.isEmpty()) {
                JSONObject respJson = new JSONObject(respBody);
                String errKey = respJson.optString("errorKey");
                String errMsg = respJson.optString("errorMessage");
                pass = expectedKey.equalsIgnoreCase(errKey)
                        && (expectedMsg.isEmpty() || errMsg.contains(expectedMsg));
            }
        }

        // Write result back to Excel
        ExcelUtils.writeResult(EXCEL_PATH, SHEET_NAME, testCaseID, pass ? "PASS" : "FAIL");

        Assert.assertTrue(pass,
            "Failed TestCase: " + testCaseID + "\nExpectedStatus=" + expectedStatus +
            "\nActualStatus=" + actualStatus + "\nBody=" + respBody);
    }
}
