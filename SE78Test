// ----- Prepare Expected Fields -----
Map<String, String> expectedFields = new HashMap<>();

if (isDbRequired) {
    if ("TC04_ClosedChargeID".equals(testId)) {
        // Negative test case: closed charge
        expectedFields.put("errorResponse.errorInfo[0].code", "4310");
    } else {
        // Normal DB-driven validation for open charges
        expectedFields.put("responseMessage.responseBody.FormStatus", dbFormStatus);
        expectedFields.put("responseMessage.responseBody.cyclicCount", dbCycCnt);
        expectedFields.put("responseMessage.responseBody.errorCode", "0");
    }
} else if (isExcelValidationRequired) {
    JSONObject expJson = new JSONObject(expectedFieldsJson);
    for (String k : expJson.keySet()) {
        expectedFields.put(k, expJson.get(k).toString());
    }
}

// ----- Field-wise Validation -----
boolean pass = true;
String failReason = "";

for (Map<String, String> record : apiData) {
    for (Map.Entry<String, String> entry : expectedFields.entrySet()) {
        String key = entry.getKey();
        String expectedVal = entry.getValue();

        // Match flattened keys loosely if needed
        String actualVal = record.entrySet().stream()
                .filter(e -> e.getKey().endsWith(key))
                .map(Map.Entry::getValue)
                .findFirst()
                .orElse("");

        if (!expectedVal.equals(actualVal)) {
            pass = false;
            failReason = "Mismatch for field: " + key +
                    " | Expected: " + expectedVal +
                    " | Actual: " + actualVal;
            logBoth(failReason);
        } else {
            logBoth("Field validation passed -> " + key + " | Value: " + actualVal);
        }
    }
}

// ----- Assert if any mismatch -----
if (!pass) {
    Assert.fail("Field validation failed: " + failReason);
} else {
    logBoth("All expected fields validated successfully.");
}

// ----- Status Validation for TC04 -----
if ("TC04_ClosedChargeID".equals(testId)) {
    Assert.assertEquals(status, 400, "Expected HTTP status 400 for closed ChargeID");
    logBoth("HTTP status validation passed for TC04: " + status);
} else if (!expStatusStr.isBlank()) {
    int expStatus = Integer.parseInt(expStatusStr);
    Assert.assertEquals(status, expStatus, "Unexpected HTTP status for test " + testId);
    logBoth("Expected HTTP status matched: " + expStatus);
}
