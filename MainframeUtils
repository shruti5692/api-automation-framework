package com.framework.utils;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.util.concurrent.TimeUnit;

public class MainframeUtils {

    private static final String PCOMM_EXE   = "C:\\Program Files (x86)\\IBM\\Personal Communications\\pcsws.exe";
    private static final String SESSION_FILE = "C:\\Users\\45453759\\Desktop\\Session A.ws";
    private static final String BASE_MACRO   = "C:\\Users\\45453759\\IdeaProjects\\api-automation-framework\\src\\test\\resources\\DBSnapshotMacro.mac";

    public static void captureDbEvidence(String chgId) throws Exception {
        // === STEP 1: Read macro template ===
        String macroContent = Files.readString(Paths.get(BASE_MACRO), StandardCharsets.UTF_8);
        if (!macroContent.contains("<CHG_ID>"))
            throw new IllegalStateException("Macro template does not contain placeholder <CHG_ID>");

        // === STEP 2: Inject charge ID dynamically ===
        String injectedMacro = macroContent.replace("<CHG_ID>", chgId);

        // === STEP 3: Write temp macro ===
        Path tempMacro = Paths.get(System.getProperty("java.io.tmpdir"), "temp_macro_" + chgId + ".mac");
        Files.writeString(tempMacro, injectedMacro, StandardCharsets.UTF_8);

        System.out.println("=== MAINFRAME MACRO EXECUTION ===");
        System.out.println("Charge ID: " + chgId);
        System.out.println("Temp macro created at: " + tempMacro);

        // === STEP 4: Create a .bat launcher ===
        Path batFile = Paths.get(System.getProperty("java.io.tmpdir"), "run_pcomm_" + chgId + ".bat");
        String batContent = String.join("\r\n",
                "@echo off",
                "setlocal",
                "echo Running PCOMM for CHG_ID=" + chgId,
                "start \"\" \"" + PCOMM_EXE + "\" \"" + SESSION_FILE + "\" /H /R:" + tempMacro,
                "exit /b"
        );
        Files.writeString(batFile, batContent, StandardCharsets.UTF_8);

        // === STEP 5: Kill any old sessions before launching ===
        try {
            Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
            Thread.sleep(2000);
        } catch (Exception ignore) {}

        // === STEP 6: Run the .bat launcher ===
        ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/c", batFile.toString());
        pb.redirectErrorStream(true);
        Process process = pb.start();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null)
                System.out.println("[PCOMM] " + line);
        }

        // === STEP 7: Wait for macro to finish and evidence capture ===
        boolean finished = process.waitFor(120, TimeUnit.SECONDS);
        if (!finished) {
            process.destroyForcibly();
            throw new RuntimeException("PCOMM macro execution timed out");
        }

        Thread.sleep(5000); // Allow final screenshot to save

        // === STEP 8: Close PCOMM safely ===
        try {
            Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
            System.out.println("Closed PCOMM after evidence capture.");
        } catch (Exception e) {
            System.out.println("Warning: Could not close PCOMM - " + e.getMessage());
        }

        // === STEP 9: Cleanup ===
        Files.deleteIfExists(tempMacro);
        Files.deleteIfExists(batFile);

        System.out.println("=== Evidence captured successfully for CHG_ID " + chgId + " ===");
    }
}
