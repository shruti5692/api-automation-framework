public static void captureDbEvidence(String chgId) throws Exception {
    // Path to your base macro file (static one)
    Path macroFile = Paths.get("src/test/resources/DBSnapshotMacro.mac");

    // ‚úÖ Read the original macro content
    String macroContent = Files.readString(macroFile);

    // ‚úÖ Replace placeholder <CHG_ID> dynamically (case-insensitive)
    macroContent = macroContent.replaceAll("(?i)<CHG_ID>", chgId);

    // ‚úÖ Create temp macro inside same resources directory
    Path resourcesDir = macroFile.getParent();
    Path tempMacro = resourcesDir.resolve("temp_macro_" + chgId + ".mac");
    Files.writeString(tempMacro, macroContent);

    System.out.println("=== Starting PCOMM Macro Execution ===");
    System.out.println("Charge ID: " + chgId);
    System.out.println("Temp Macro File: " + tempMacro);

    // ‚úÖ Verify session file exists
    if (!Files.exists(Paths.get(SESSION_FILE)))
        throw new RuntimeException("Session file not found: " + SESSION_FILE);

    // ‚úÖ Kill any running PCOMM processes before starting
    try {
        Process killProcess = Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
        killProcess.waitFor(3, TimeUnit.SECONDS);
        System.out.println("‚úÖ Killed existing PCOMM instances");
    } catch (Exception e) {
        System.out.println("[WARN] Failed to kill existing PCOMM: " + e.getMessage());
    }

    // ‚úÖ Launch PCOMM with the dynamic macro from resources
    ProcessBuilder pb = new ProcessBuilder(
            PCOMM_EXE,
            SESSION_FILE,
            "/R:" + tempMacro.toAbsolutePath().toString()
    );
    pb.redirectErrorStream(true);
    Process process = pb.start();

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println("[PCOMM] " + line);
        }
    }

    boolean finished = process.waitFor(90, TimeUnit.SECONDS);
    if (!finished) {
        process.destroyForcibly();
        throw new RuntimeException("‚è∞ Macro timed out after 90 seconds for CHG_ID: " + chgId);
    }

    int exitCode = process.exitValue();
    if (exitCode != 0)
        throw new RuntimeException("‚ùå Macro failed with exit code " + exitCode);

    System.out.println("‚úÖ Macro executed successfully for ChargeID: " + chgId);

    // ‚úÖ Clean up temp macro
    try {
        Files.deleteIfExists(tempMacro);
        System.out.println("üßπ Deleted temp macro: " + tempMacro);
    } catch (Exception e) {
        System.out.println("[WARN]
