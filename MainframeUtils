package com.framework.utils;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.*;
import java.util.concurrent.TimeUnit;

public class MainframeUtils {

    private static final String PCOMM_EXE   = "C:\\Program Files (x86)\\IBM\\Personal Communications\\pcsws.exe";
    private static final String SESSION_FILE = "C:\\Users\\45453759\\Desktop\\SessionA.ws";
    private static final String MACRO_FILE   = "C:\\Users\\45453759\\IdeaProjects\\api-automation-framework\\src\\test\\resources\\DBSnapshotMacro.mac";

    public static void captureDbEvidence(String chgId) throws Exception {
        // --- Step 1: Read macro content ---
        String macroContent = Files.readString(Paths.get(MACRO_FILE));

        // --- Step 2: Inject dynamic CHG_ID ---
        if (macroContent.contains("<CHG_ID>")) {
            macroContent = macroContent.replace("<CHG_ID>", chgId);
            System.out.println("DEBUG: Replaced <CHG_ID> placeholder directly.");
        } else {
            macroContent = macroContent.replaceAll(
                    "(?i)(A\\s*\\.\\s*CHG_ID\\s*=\\s*')[^']+(')",
                    "$1" + chgId + "$2"
            );
            System.out.println("DEBUG: Replaced CHG_ID value dynamically via regex.");
        }

        // --- Step 3: Preview the SQL line for verification ---
        macroContent.lines()
                .filter(line -> line.toUpperCase().contains("CHG_ID"))
                .forEach(line -> System.out.println("DEBUG: Final SQL line -> " + line));

        // --- Step 4: Write temp macro ---
        Path tempMacro = Paths.get(System.getProperty("java.io.tmpdir"),
                "temp_macro_" + System.currentTimeMillis() + ".mac");
        Files.writeString(tempMacro, macroContent);
        System.out.println("DEBUG: Temp macro file created at " + tempMacro);

        // --- Step 5: Validate session & PCOMM exe ---
        if (!Files.exists(Paths.get(SESSION_FILE)))
            throw new RuntimeException("Session file not found: " + SESSION_FILE);
        if (!Files.exists(Paths.get(PCOMM_EXE)))
            throw new RuntimeException("PCOMM executable not found: " + PCOMM_EXE);

        // --- Step 6: Kill any existing PCOMM instances ---
        Runtime.getRuntime().exec("taskkill /IM pcsws.exe /F >nul 2>&1");
        Thread.sleep(2000);

        // --- Step 7: Execute PCOMM with temp macro ---
        ProcessBuilder pb = new ProcessBuilder(PCOMM_EXE, SESSION_FILE, "/R:" + tempMacro.toString());
        pb.redirectErrorStream(true);
        Process process = pb.start();

        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println("[PCOMM] " + line);
            }
        }

        boolean finished = process.waitFor(120, TimeUnit.SECONDS);
        if (!finished) {
            process.destroyForcibly();
            throw new RuntimeException("Macro execution timed out after 120 seconds");
        }

        int exitCode = process.exitValue();
        if (exitCode != 0)
            throw new RuntimeException("Macro failed with exit code " + exitCode);

        System.out.println("✅ Macro executed successfully for CHG_ID: " + chgId);

        // --- Step 8: Delete temp macro ---
        try {
            Files.deleteIfExists(tempMacro);
        } catch (Exception e) {
            System.out.println("⚠️ Could not delete temp macro: " + e.getMessage());
        }
    }
}
