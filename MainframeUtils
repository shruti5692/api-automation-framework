public static void captureDbEvidence(String chgId) throws Exception {
    // === Step 1: Read base macro ===
    String macroContent = Files.readString(Paths.get(MACRO_FILE));

    // === Step 2: Replace CHG_ID dynamically ===
    macroContent = macroContent.replaceAll("(?i)(A\\s*\\.\\s*CHG_ID\\s*=\\s*')([^']+)(')", "$1" + chgId + "$3");

    // === Step 3: Create unique temp macro ===
    Path tempMacro = Paths.get(System.getProperty("java.io.tmpdir"),
            "temp_macro_" + System.currentTimeMillis() + ".mac");
    Files.writeString(tempMacro, macroContent);

    System.out.println("=== Starting PCOMM Macro Execution ===");
    System.out.println("Charge ID: " + chgId);
    System.out.println("Temp Macro File: " + tempMacro);

    if (!Files.exists(Paths.get(SESSION_FILE))) {
        throw new RuntimeException("Session file not found: " + SESSION_FILE);
    }

    // === Step 4: Kill any previous sessions ===
    try {
        Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
        Thread.sleep(2000);
    } catch (Exception ignore) {}

    // === Step 5: Launch PCOMM session with macro ===
    ProcessBuilder pb = new ProcessBuilder(
            PCOMM_EXE,
            SESSION_FILE,
            "/H",                     // ‚úÖ Hide splash screen
            "/R:" + tempMacro.toString()  // ‚úÖ Auto-run the temp macro
    );

    pb.redirectErrorStream(true);
    Process process = pb.start();

    // === Step 6: Log PCOMM output ===
    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println("[PCOMM] " + line);
        }
    }

    // === Step 7: Wait for macro completion ===
    boolean completed = process.waitFor(90, TimeUnit.SECONDS);

    if (!completed) {
        System.out.println("‚ö†Ô∏è Macro timed out ‚Äî closing PCOMM...");
        process.destroyForcibly();
    } else {
        System.out.println("‚úÖ Macro executed successfully for CHG_ID: " + chgId);
    }

    // === Step 8: Wait few seconds for screenshot save ===
    Thread.sleep(5000);

    // === Step 9: Close PCOMM automatically ===
    try {
        Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
        System.out.println("‚úÖ Closed PCOMM window automatically.");
    } catch (Exception e) {
        System.out.println("‚ö†Ô∏è Could not close PCOMM: " + e.getMessage());
    }

    // === Step 10: Delete temp macro ===
    Files.deleteIfExists(tempMacro);
    System.out.println("üßπ Deleted temp macro: " + tempMacro);
}
