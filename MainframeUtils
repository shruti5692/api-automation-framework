public static void captureDbEvidence(String chgId) throws Exception {
    String macroContent = Files.readString(Paths.get(MACRO_FILE));

    // ✅ Replace CHG_ID dynamically (handles spaces & quotes)
    macroContent = macroContent.replaceAll("(?i)(A\\s*\\.\\s*CHG_ID\\s*=\\s*')([^']+)(')", "$1" + chgId + "$3");

    // ✅ Create unique temp macro
    Path tempMacro = Paths.get(System.getProperty("java.io.tmpdir"), "temp_macro_" + System.currentTimeMillis() + ".mac");
    Files.writeString(tempMacro, macroContent);

    System.out.println("=== Starting PCOMM Macro Execution ===");
    System.out.println("Charge ID: " + chgId);
    System.out.println("Temp Macro File: " + tempMacro);

    if (!Files.exists(Paths.get(SESSION_FILE)))
        throw new RuntimeException("Session file not found: " + SESSION_FILE);

    // ✅ Kill any existing PCOMM instances
    Runtime.getRuntime().exec("taskkill /F /IM pcsws.exe");
    Thread.sleep(2000);

    // ✅ Execute the macro dynamically
    ProcessBuilder pb = new ProcessBuilder(
            PCOMM_EXE,
            SESSION_FILE,
            "/R:" + tempMacro.toString()
    );
    pb.redirectErrorStream(true);
    Process process = pb.start();

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println("[PCOMM] " + line);
        }
    }

    process.waitFor(90, TimeUnit.SECONDS);

    int exitCode = process.exitValue();
    if (exitCode != 0)
        throw new RuntimeException("Macro failed with exit code " + exitCode);

    System.out.println("Macro executed successfully for ChargeID: " + chgId);

    // ✅ Delete temp macro
    Files.deleteIfExists(tempMacro);
}
