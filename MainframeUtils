package com.framework.utils;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.*;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class MainframeUtils {

    private static final String PCOMM_EXE = "C:\\Program Files (x86)\\IBM\\Personal Communications\\pcsws.exe";
    private static final String SESSION_FILE = "C:\\Users\\45453759\\Desktop\\SessionA.ws";
    private static final String MACRO_FILE   = "C:\\Users\\45453759\\IdeaProjects\\api-automation-framework\\src\\test\\resources\\DBSnapshotMacro.mac";

    public static void captureDbEvidence(String chgId) throws Exception {
        // 1️⃣ Read original macro
        String macroContent = Files.readString(Paths.get(MACRO_FILE));

        // 2️⃣ Replace CHG_ID
        macroContent = macroContent.replaceAll("(?<=A\\.CHG_ID=')[^']+", chgId);

        // 3️⃣ Write temp macro
        Path tempMacro = Paths.get(System.getProperty("java.io.tmpdir"),
                "temp_macro_" + UUID.randomUUID() + ".mac");
        Files.writeString(tempMacro, macroContent);

        // 4️⃣ Run macro
        run("\"" + PCOMM_EXE + "\" \"" + SESSION_FILE + "\" /R:\"" + tempMacro + "\"");

        // 5️⃣ Delete temp macro
        Files.deleteIfExists(tempMacro);

        // 6️⃣ Close session
        run("\"" + PCOMM_EXE + "\" /Q");
    }

    private static void run(String cmd) throws Exception {
        ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/c", cmd);
        pb.redirectErrorStream(true);
        Process p = pb.start();

        try (BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
            String line;
            while ((line = r.readLine()) != null) System.out.println("[PCOMM] " + line);
        }

        if (!p.waitFor(120, TimeUnit.SECONDS)) {
            p.destroyForcibly();
            throw new RuntimeException("Command timed out: " + cmd);
        }
        if (p.exitValue() != 0) throw new RuntimeException("Process failed with exit code " + p.exitValue());
    }
}
