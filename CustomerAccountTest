@Test
public void validateCustomerAccounts() throws Exception {

    // ------------------- AUTH DATA ------------------- //
    Map<String, String> authRow = ExcelUtils.readSheet(EXCEL_PATH, AUTH_SHEET).get(0);
    String jwt = JwtFetcher.fetchStaffJwt(authRow.get("Username"));

    // ------------------- TEST DATA ------------------- //
    Map<String, String> testRow = ExcelUtils.readSheet(EXCEL_PATH, TEST_SHEET).get(0);
    String custNo = testRow.get("CustomerIdentificationNumber").trim();
    String headerJson = testRow.get("Headers");

    // ------------------- HEADERS ------------------- //
    Map<String, String> headersMap = new HashMap<>(JsonPath.read(headerJson, "$"));
    headersMap.put("X-HSBC-E2E-Trust-Token", jwt);

    // Sensitive header in required JSON format
    String sensitiveJson = String.format(
            "[{\"key\":\"%s\",\"value\":\"%s\"}]",
            SENSITIVE_KEY, custNo
    );
    headersMap.put("X-HSBC-Sensitive-Data", sensitiveJson);

    // ------------------- URL ------------------- //
    String url = ConfigManager.get("cust.url")
            + "u/" + custNo + "/rel-acct?maxAccounts=0004";

    System.out.println("Final URL: " + url);
    System.out.println("Headers Map: " + headersMap);

    // ------------------- API CALL ------------------- //
    OkHttpClient client = new OkHttpClient();
    Request.Builder builder = new Request.Builder().url(url).get();
    headersMap.forEach(builder::addHeader);
    Request request = builder.build();

    List<Map<String, String>> apiData = new ArrayList<>();

    try (Response response = client.newCall(request).execute()) {
        int statusCode = response.code();
        Assert.assertEquals("Unexpected status code!", 200, statusCode);

        String body = response.body() != null ? response.body().string() : "";
        System.out.println("API Response: " + body);

        // Parse API response
        List<Map<String, Object>> accounts = JsonPath.read(body, "$..accountInformationList[*]");
        for (Map<String, Object> acc : accounts) {
            Map<String, Object> details = (Map<String, Object>) acc.get("accountDetails");

            String prodId = String.valueOf(details.get("sortCode")).trim()
                    + String.valueOf(details.get("accountNumber")).trim();
            String prodCode = String.valueOf(acc.get("productCode")).trim();

            Map<String, String> record = new HashMap<>();
            record.put("CUST_NO", custNo);
            record.put("PROD_ID", prodId);
            record.put("PROD_COD", prodCode); // match DB column name

            apiData.add(record);
        }
    }

    // ------------------- DB DATA ------------------- //
    List<Map<String, String>> dbData = fetchData(CUSTOMER_QUERY, custNo);

    // ------------------- SUBSET COMPARISON ------------------- //
    boolean allFound = true;
    for (Map<String, String> apiRec : apiData) {
        boolean match = dbData.stream().anyMatch(dbRec ->
                apiRec.get("CUST_NO").equals(dbRec.get("CUST_NO")) &&
                apiRec.get("PROD_ID").equals(dbRec.get("PROD_ID")) &&
                apiRec.get("PROD_COD").equals(dbRec.get("PROD_COD"))
        );
        if (!match) {
            allFound = false;
            System.out.println("Missing API record in DB: " + apiRec);
        }
    }

    Assert.assertTrue("Some API records not found in DB!", allFound);
}
