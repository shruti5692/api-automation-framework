package tests;

import org.framework.utils.ConfigManager;
import org.framework.utils.DBUtils;
import org.framework.utils.ExcelUtils;
import org.framework.utils.JwtFetcher;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.*;

/**
 * Reads test rows from Excel, fetches JWT, calls API, then validates
 * API response against DB data (CUD_PROD_RELN).
 */
public class CustomerAccountTest {

    private static final String EXCEL_PATH = System.getProperty("user.dir") + "/TestData.xlsx";
    private static final String AUTH_SHEET = "Auth";
    private static final String CASE_SHEET = "TestCases";

    @DataProvider(name = "cases")
    public Object[][] cases() throws Exception {
        List<Map<String,String>> rows = ExcelUtils.readSheet(EXCEL_PATH, CASE_SHEET);
        Object[][] data = new Object[rows.size()][1];
        for (int i = 0; i < rows.size(); i++) data[i][0] = rows.get(i);
        return data;
    }

    @Test(dataProvider = "cases")
    public void customerAccountTest(Map<String,String> row) throws Exception {

        String testId   = row.get("TestCaseID");
        String custCin  = row.get("CustomerIdentificationNumber");
        String headersJ = row.get("Headers");   // JSON string of extra headers

        // username from Auth sheet (first row only)
        String username = ExcelUtils.readSheet(EXCEL_PATH, AUTH_SHEET)
                                    .get(0).get("Username");

        // build request headers
        Map<String,String> headers = JsonHelper.toMap(headersJ);
        headers.put("X-HSBC-E2E-Trust-Token", JwtFetcher.fetchJwt(username));
        headers.put("Content-Type", "application/json");
        headers.put("Accept", "application/json");

        // sensitive key header
        String sensitiveKey = ConfigManager.get("sensitive.key");
        headers.put("X-HSBC-Sensitive-Data",
            "[{\"key\":\"" + sensitiveKey + "\",\"value\":\"" + custCin + "\"}]");

        // call API
        String base = ConfigManager.get("api.base.url");
        String path = ConfigManager.get("api.cust.account.path");
        String url  = base + path + "/" + sensitiveKey + "/rel-acct";

        String apiBody = SimpleHttp.get(url, headers, Map.of("maxAccounts","0004"));

        // extract Set<String> from API (sortCode+accountNumber)
        Set<String> apiSet = JsonHelper.extractProdIds(apiBody);

        // fetch DB data for same CIN
        Set<String> dbSet = DbFetchHelper.fetchProdIds(custCin);

        // compare
        boolean pass = apiSet.equals(dbSet);
        ExcelUtils.writeResult(EXCEL_PATH, CASE_SHEET, testId, pass ? "PASS" : "FAIL");
        Assert.assertTrue(pass,
            "Mismatch\nOnlyInAPI: " + diff(apiSet, dbSet) + "\nOnlyInDB: " + diff(dbSet, apiSet));
    }

    private static Set<String> diff(Set<String>a, Set<String>b){
        Set<String> s=new HashSet<>(a); s.removeAll(b); return s;
    }
}
