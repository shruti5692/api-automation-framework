package com.framework.tests;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.framework.utils.ExcelUtils;
import okhttp3.*;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.util.*;

public class CustomerAccountIT {

    private static final String EXCEL_PATH = "src/test/resources/CustomerData.xlsx";
    private static final String SHEET = "Tests";
    private static final String API_TEMPLATE =
            "https://digitaldev-int-rbwm.systems.uk.hsbc/cb-rps-05/"
          + "gb-hbeu-rps-pod-cust-rel-acct-proxy/v1/cust/%s/rel-acct?maxAccounts=0004";

    private final OkHttpClient client = new OkHttpClient();
    private final ObjectMapper mapper = new ObjectMapper();

    @DataProvider(name = "custData")
    public Object[][] custData() throws Exception {
        List<Map<String, String>> rows = ExcelUtils.readSheet(EXCEL_PATH, SHEET);
        return rows.stream().map(r -> new Object[]{r}).toArray(Object[][]::new);
    }

    @Test(dataProvider = "custData")
    public void validateAccounts(Map<String, String> row) throws Exception {
        String testId   = row.get("TestCaseID");
        String user     = row.get("Username");
        String authIdx  = row.get("AuthIndexValue");
        String key      = row.get("SensitiveKey");
        String cin      = row.get("CustomerIdentificationNumber");
        String expected = row.get("ExpectedAccounts");

        // 1. JWT from your existing helper
        String jwt = StaffJwtFetcher.fetchJwt(user, authIdx);

        // 2. Build header & URL
        String sensitiveHeader = "[[{\"key\":\"" + key + "\",\"value\":\"" + cin + "\"}]]";
        String url = String.format(API_TEMPLATE, key);

        Request request = new Request.Builder()
                .url(url)
                .addHeader("Accept", "application/json")
                .addHeader("X-HSBC-E2E-Trust-Token", jwt)
                .addHeader("X-HSBC-Sensitive-Data", sensitiveHeader)
                .build();

        try (Response resp = client.newCall(request).execute()) {
            Assert.assertEquals(resp.code(), 200, "HTTP status");

            String json = Objects.requireNonNull(resp.body()).string();
            System.out.println("[" + testId + "] Response: " + json);

            // 3. Store full JSON if needed
            List<String> accounts = new ArrayList<>();
            JsonNode root = mapper.readTree(json);
            root.findValues("accountNumber").forEach(n -> accounts.add(n.asText()));

            // 4. Validate
            List<String> expectedList =
                    Arrays.asList(expected.split("\\s*,\\s*"));
            Assert.assertTrue(new HashSet<>(accounts).containsAll(expectedList),
                    "Expected " + expectedList + " but got " + accounts);

            // Optional: write result back to Excel
            ExcelUtils.writeResult(EXCEL_PATH, SHEET, testId, "PASS");
        } catch (AssertionError | Exception e) {
            ExcelUtils.writeResult(EXCEL_PATH, SHEET, testId, "FAIL: " + e.getMessage());
            throw e;
        }
    }
}
