package com.framework.tests;

import com.framework.core.*;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.Test;
import java.util.*;

public class CustomerAccountTest extends BaseApiClient {

    private static final String EXCEL_PATH = "src/test/resources/TestData.xlsx";
    private static final String AUTH_SHEET = "Auth";
    private static final String CASE_SHEET = "TestCases";

    @Test
    public void verifyCustomerAccounts() throws Exception {

        // --- Reusable util calls ---
        List<Map<String,String>> authData = ExcelUtils.readSheet(EXCEL_PATH, AUTH_SHEET);
        String username = authData.get(0).get("username");

        List<Map<String,String>> testCases = ExcelUtils.readSheet(EXCEL_PATH, CASE_SHEET);

        // --- Per-testcase logic ---
        for (Map<String,String> tc : testCases) {

            String tcId   = tc.get("TestCaseID");
            String custId = tc.get("CustomerIdentificationNumber");
            Map<String,String> hdrs = parseHeaderJson(tc.get("Headers"));

            // static keys come from config
            hdrs.put("trust-token", ConfigManager.get("trust.token"));
            hdrs.put("sensitive-key", ConfigManager.get("sensitive.key"));

            Map<String,String> qp = Map.of("customerIdentificationNumber", custId);

            Response res = get(ConfigManager.get("api.customerAccountUrl"), hdrs, qp);

            boolean pass = validateResponse(res, tc.get("ExpectedOutput"));
            ExcelUtils.writeResult(EXCEL_PATH, CASE_SHEET, tcId, pass ? "Pass" : "Fail");
            Assert.assertTrue(pass, "Validation failed for TC: " + tcId);
        }
    }

    private Map<String,String> parseHeaderJson(String json) {
        Map<String,String> map = new HashMap<>();
        if (json != null) {
            json = json.replaceAll("[{}\"]","");
            for (String pair : json.split(",")) {
                String[] kv = pair.split(":");
                if (kv.length==2) map.put(kv[0].trim(), kv[1].trim());
            }
        }
        return map;
    }

    private boolean validateResponse(Response res, String expectedJson) {
        // call reusable JSON comparison if you want
        return res.statusCode()==200;
    }
}
