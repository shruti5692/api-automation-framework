package org.framework.tests;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import okhttp3.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.File;
import java.io.FileInputStream;
import java.util.*;

public class CustomerAccountIT {

    private static final String API_URL =
        "https://digitaldev-int-rbwm.systems.uk.hsbc/cb-rps-05/gb-hbeu-rps-pod-cust-rel-acct-proxy/v1/"
      + "cust/%s/rel-acct?maxAccounts=0004"; // %s = SensitiveKey

    private final OkHttpClient client = new OkHttpClient();
    private final ObjectMapper mapper = new ObjectMapper();

    @DataProvider(name = "customerData")
    public Object[][] customerData() throws Exception {
        return readExcel("src/test/resources/CustomerData.xlsx");
    }

    @Test(dataProvider = "customerData")
    public void verifyCustomerAccounts(String testId,
                                       String username,
                                       String authIndexValue,
                                       String sensitiveKey,
                                       String cin,
                                       String expectedAccounts) throws Exception {

        // 1. Get fresh JWT for this username / authIndexValue
        String jwtToken = StaffJwtFetcher.fetchJwt(username, authIndexValue);

        // 2. Build X-HSBC-Sensitive-Data header
        String sensitiveHeader = "[[{\"key\":\"" + sensitiveKey + "\",\"value\":\"" + cin + "\"}]]";

        // 3. Call API (note: URL path contains the same key)
        String url = String.format(API_URL, sensitiveKey);

        Request request = new Request.Builder()
                .url(url)
                .addHeader("Accept", "application/json")
                .addHeader("X-HSBC-E2E-Trust-Token", jwtToken)
                .addHeader("X-HSBC-Sensitive-Data", sensitiveHeader)
                .build();

        try (Response response = client.newCall(request).execute()) {
            Assert.assertEquals(response.code(), 200, "HTTP status");

            String json = Objects.requireNonNull(response.body()).string();

            // store raw JSON if you need it later
            System.out.println("[" + testId + "] Full response: " + json);

            // 4. Extract all accountNumbers from JSON
            JsonNode root = mapper.readTree(json);
            List<String> actualAccounts = new ArrayList<>();
            root.findValues("accountNumber").forEach(n -> actualAccounts.add(n.asText()));

            // 5. Compare with expected
            List<String> expectedList =
                    Arrays.asList(expectedAccounts.split("\\s*,\\s*"));
            Assert.assertTrue(new HashSet<>(actualAccounts).containsAll(expectedList),
                    "Expected " + expectedList + " but got " + actualAccounts);
        }
    }

    private Object[][] readExcel(String path) throws Exception {
        List<Object[]> data = new ArrayList<>();
        try (FileInputStream fis = new FileInputStream(new File(path));
             Workbook wb = new XSSFWorkbook(fis)) {
            Sheet sheet = wb.getSheet("Tests");
            for (Row r : sheet) {
                if (r.getRowNum() == 0) continue; // header
                data.add(new Object[]{
                        r.getCell(0).getStringCellValue(), // TestCaseID
                        r.getCell(1).getStringCellValue(), // Username
                        r.getCell(2).getStringCellValue(), // AuthIndexValue
                        r.getCell(3).getStringCellValue(), // SensitiveKey
                        r.getCell(4).getStringCellValue(), // CIN
                        r.getCell(5).getStringCellValue()  // ExpectedAccounts
                });
            }
        }
        return data.toArray(new Object[0][]);
    }
}}
