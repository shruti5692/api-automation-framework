// ========== FIELD-WISE VALIDATION ==========
boolean pass = true;
StringBuilder failReasons = new StringBuilder();

// ---------------------- DB VALIDATION ----------------------
if (isDbRequired && chargeData != null && !chargeData.isEmpty()) {
    logBoth("Step: Performing DB field-wise validation");

    Map<String, String> dbRow = chargeData.get(0); // Only first record
    Map<String, String> apiMap = JsonFlattener.jsonToFlatMap(new JSONObject(body));

    logBoth("Flattened API keys available: " + apiMap.keySet());

    for (Map.Entry<String, String> dbEntry : dbRow.entrySet()) {
        String field = dbEntry.getKey();
        String expected = dbEntry.getValue();

        // Try to find closest match in flattened API
        Optional<Map.Entry<String, String>> match = apiMap.entrySet().stream()
                .filter(e -> e.getKey()
                        .replaceAll("\\[\\d+\\]", "")
                        .replaceAll("[^a-zA-Z0-9]", "")
                        .toLowerCase()
                        .endsWith(field.replaceAll("[^a-zA-Z0-9]", "").toLowerCase()))
                .findFirst();

        String actual = match.map(Map.Entry::getValue).orElse("null");

        logBoth(String.format("🔍 DB Validation -> Field: %-20s | Expected: %-15s | Actual: %-15s",
                field, expected, actual));

        if (!expected.equalsIgnoreCase(actual)) {
            failReasons.append(String.format(
                    "\nField '%s' mismatch. Expected: %s, Actual: %s",
                    field, expected, actual
            ));
            pass = false;
        }
    }

    logBoth("✅ DB Field-wise validation completed");

}
// ---------------------- EXCEL VALIDATION ----------------------
else if (!expectedFieldsJson.trim().isEmpty()) {
    logBoth("Step: Performing Excel field-wise validation");

    Map<String, String> expectedFields = ExcelUtils.jsonToMap(expectedFieldsJson);
    Map<String, String> apiMap = JsonFlattener.jsonToFlatMap(new JSONObject(body));

    logBoth("Flattened API keys available: " + apiMap.keySet());

    for (Map.Entry<String, String> entry : expectedFields.entrySet()) {
        String field = entry.getKey().trim();
        String expectedValue = entry.getValue().trim();

        Optional<Map.Entry<String, String>> match = apiMap.entrySet().stream()
                .filter(e -> e.getKey()
                        .replaceAll("\\[\\d+\\]", "")
                        .replaceAll("[^a-zA-Z0-9]", "")
                        .toLowerCase()
                        .endsWith(field.replaceAll("[^a-zA-Z0-9]", "").toLowerCase()))
                .findFirst();

        String actualValue = match.map(Map.Entry::getValue).orElse("null");

        logBoth(String.format("📘 Excel Validation -> Field: %-20s | Expected: %-15s | Actual: %-15s",
                field, expectedValue, actualValue));

        if (!expectedValue.equalsIgnoreCase(actualValue)) {
            failReasons.append(String.format(
                    "\nField '%s' mismatch. Expected: %s, Actual: %s",
                    field, expectedValue, actualValue
            ));
            pass = false;
        }
    }

    logBoth("✅ Excel Field-wise validation completed");
}
