import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jayway.jsonpath.JsonPath;

import java.util.*;

public class JsonUtils {

    private static final ObjectMapper mapper = new ObjectMapper();

    /**
     * Converts a JSON string to a flat Map of key-value pairs.
     * Nested keys are represented in dot notation.
     */
    public static Map<String, String> jsonToFlatMap(String json) {
        Map<String, String> flatMap = new HashMap<>();
        if (json == null || json.isBlank()) return flatMap;

        try {
            JsonNode root = mapper.readTree(json);
            flattenJson("", root, flatMap);
        } catch (Exception e) {
            System.err.println("Error in jsonToFlatMap: " + e.getMessage());
        }

        return flatMap;
    }

    /**
     * Converts a JSON string (object or array) into a List of flat Maps.
     * Each array element becomes one Map. Objects become a single Map.
     */
    public static List<Map<String, String>> jsonToListOfMaps(String json) {
        List<Map<String, String>> list = new ArrayList<>();
        if (json == null || json.isBlank()) return list;

        try {
            // Parse with JsonPath to handle arrays uniformly
            Object document = JsonPath.parse(json).json();
            JsonNode root = mapper.readTree(mapper.writeValueAsString(document));

            if (root.isArray()) {
                for (JsonNode node : root) {
                    Map<String, String> flat = new HashMap<>();
                    flattenJson("", node, flat);
                    list.add(flat);
                }
            } else {
                Map<String, String> flat = new HashMap<>();
                flattenJson("", root, flat);
                list.add(flat);
            }

        } catch (Exception e) {
            System.err.println("Error in jsonToListOfMaps: " + e.getMessage());
        }

        return list;
    }

    /**
     * Recursive method to flatten a JsonNode into a flat Map.
     * Nested objects use dot notation; arrays use [index].
     */
    private static void flattenJson(String prefix, JsonNode node, Map<String, String> result) {
        if (node.isObject()) {
            node.fieldNames().forEachRemaining(field -> {
                JsonNode child = node.get(field);
                String newKey = prefix.isEmpty() ? field : prefix + "." + field;
                flattenJson(newKey, child, result);
            });
        } else if (node.isArray()) {
            int index = 0;
            for (JsonNode item : node) {
                String newKey = prefix + "[" + index + "]";
                flattenJson(newKey, item, result);
                index++;
            }
        } else if (node.isValueNode()) {
            result.put(prefix, node.asText().trim());
        }
    }
}
